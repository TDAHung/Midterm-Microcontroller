
midterm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003078  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032f0  080032f0  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080032f0  080032f0  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032f0  080032f0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032f0  080032f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080032f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000088  08003380  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08003380  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d924  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e6  00000000  00000000  0002d9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002fac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  00030550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c1e  00000000  00000000  00030ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0bf  00000000  00000000  00049b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087530  00000000  00000000  00055bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd0f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033e8  00000000  00000000  000dd148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	0800316c 	.word	0x0800316c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	0800316c 	.word	0x0800316c

0800014c <subKeyProcess>:
int KeyReg2 = NORMAL;

int KeyReg3 = NORMAL;
int TimerForKeyPress = 100;

void subKeyProcess(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	update7Seg();
 8000150:	f000 f916 	bl	8000380 <update7Seg>
}
 8000154:	bf00      	nop
 8000156:	bd80      	pop	{r7, pc}

08000158 <getKeyInput>:

void getKeyInput(){
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 800015c:	4b22      	ldr	r3, [pc, #136]	; (80001e8 <getKeyInput+0x90>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4a22      	ldr	r2, [pc, #136]	; (80001ec <getKeyInput+0x94>)
 8000162:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 8000164:	4b22      	ldr	r3, [pc, #136]	; (80001f0 <getKeyInput+0x98>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a1f      	ldr	r2, [pc, #124]	; (80001e8 <getKeyInput+0x90>)
 800016a:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(BTNPort,button);
 800016c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000170:	4820      	ldr	r0, [pc, #128]	; (80001f4 <getKeyInput+0x9c>)
 8000172:	f000 ffa9 	bl	80010c8 <HAL_GPIO_ReadPin>
 8000176:	4603      	mov	r3, r0
 8000178:	461a      	mov	r2, r3
 800017a:	4b1d      	ldr	r3, [pc, #116]	; (80001f0 <getKeyInput+0x98>)
 800017c:	601a      	str	r2, [r3, #0]
	if((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 800017e:	4b1b      	ldr	r3, [pc, #108]	; (80001ec <getKeyInput+0x94>)
 8000180:	681a      	ldr	r2, [r3, #0]
 8000182:	4b19      	ldr	r3, [pc, #100]	; (80001e8 <getKeyInput+0x90>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	429a      	cmp	r2, r3
 8000188:	d12b      	bne.n	80001e2 <getKeyInput+0x8a>
 800018a:	4b17      	ldr	r3, [pc, #92]	; (80001e8 <getKeyInput+0x90>)
 800018c:	681a      	ldr	r2, [r3, #0]
 800018e:	4b18      	ldr	r3, [pc, #96]	; (80001f0 <getKeyInput+0x98>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	429a      	cmp	r2, r3
 8000194:	d125      	bne.n	80001e2 <getKeyInput+0x8a>
		if(KeyReg3 != KeyReg2) {
 8000196:	4b18      	ldr	r3, [pc, #96]	; (80001f8 <getKeyInput+0xa0>)
 8000198:	681a      	ldr	r2, [r3, #0]
 800019a:	4b15      	ldr	r3, [pc, #84]	; (80001f0 <getKeyInput+0x98>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d00d      	beq.n	80001be <getKeyInput+0x66>
			KeyReg3 = KeyReg2;
 80001a2:	4b13      	ldr	r3, [pc, #76]	; (80001f0 <getKeyInput+0x98>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4a14      	ldr	r2, [pc, #80]	; (80001f8 <getKeyInput+0xa0>)
 80001a8:	6013      	str	r3, [r2, #0]

			if(KeyReg2 == PRESSED){
 80001aa:	4b11      	ldr	r3, [pc, #68]	; (80001f0 <getKeyInput+0x98>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d117      	bne.n	80001e2 <getKeyInput+0x8a>
				TimerForKeyPress = 200;
 80001b2:	4b12      	ldr	r3, [pc, #72]	; (80001fc <getKeyInput+0xa4>)
 80001b4:	22c8      	movs	r2, #200	; 0xc8
 80001b6:	601a      	str	r2, [r3, #0]
				subKeyProcess();
 80001b8:	f7ff ffc8 	bl	800014c <subKeyProcess>
				if(KeyReg2 == PRESSED) subKeyProcess();
				TimerForKeyPress = 200;
			}
		}
	}
}
 80001bc:	e011      	b.n	80001e2 <getKeyInput+0x8a>
			TimerForKeyPress--;
 80001be:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <getKeyInput+0xa4>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	3b01      	subs	r3, #1
 80001c4:	4a0d      	ldr	r2, [pc, #52]	; (80001fc <getKeyInput+0xa4>)
 80001c6:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 80001c8:	4b0c      	ldr	r3, [pc, #48]	; (80001fc <getKeyInput+0xa4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d108      	bne.n	80001e2 <getKeyInput+0x8a>
				if(KeyReg2 == PRESSED) subKeyProcess();
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <getKeyInput+0x98>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d101      	bne.n	80001dc <getKeyInput+0x84>
 80001d8:	f7ff ffb8 	bl	800014c <subKeyProcess>
				TimerForKeyPress = 200;
 80001dc:	4b07      	ldr	r3, [pc, #28]	; (80001fc <getKeyInput+0xa4>)
 80001de:	22c8      	movs	r2, #200	; 0xc8
 80001e0:	601a      	str	r2, [r3, #0]
}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000004 	.word	0x20000004
 80001ec:	20000000 	.word	0x20000000
 80001f0:	20000008 	.word	0x20000008
 80001f4:	40010800 	.word	0x40010800
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	20000010 	.word	0x20000010

08000200 <display7Seg>:
#define ENABLE_LED  	GPIO_PIN_RESET
#define DISABLE_LED  	GPIO_PIN_SET

int led_buffer[3]={0,0,0};

void display7Seg(int num){
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(led7Port, seg1 | seg2 | seg3 | seg4 | seg5 | seg6 | seg7, DISABLE_LED);
 8000208:	2201      	movs	r2, #1
 800020a:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 800020e:	484f      	ldr	r0, [pc, #316]	; (800034c <display7Seg+0x14c>)
 8000210:	f000 ff71 	bl	80010f6 <HAL_GPIO_WritePin>
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2b09      	cmp	r3, #9
 8000218:	f200 8094 	bhi.w	8000344 <display7Seg+0x144>
 800021c:	a201      	add	r2, pc, #4	; (adr r2, 8000224 <display7Seg+0x24>)
 800021e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000222:	bf00      	nop
 8000224:	0800024d 	.word	0x0800024d
 8000228:	08000267 	.word	0x08000267
 800022c:	08000281 	.word	0x08000281
 8000230:	0800029b 	.word	0x0800029b
 8000234:	080002b5 	.word	0x080002b5
 8000238:	080002cf 	.word	0x080002cf
 800023c:	080002e9 	.word	0x080002e9
 8000240:	08000303 	.word	0x08000303
 8000244:	0800031d 	.word	0x0800031d
 8000248:	0800032b 	.word	0x0800032b
	switch(num)
			{
			case 0:
				HAL_GPIO_WritePin(led7Port, seg1 | seg2 | seg3 | seg4 | seg5 | seg6 , ENABLE_LED);
 800024c:	2200      	movs	r2, #0
 800024e:	f44f 41fc 	mov.w	r1, #32256	; 0x7e00
 8000252:	483e      	ldr	r0, [pc, #248]	; (800034c <display7Seg+0x14c>)
 8000254:	f000 ff4f 	bl	80010f6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led7Port, seg7, DISABLE_LED);
 8000258:	2201      	movs	r2, #1
 800025a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800025e:	483b      	ldr	r0, [pc, #236]	; (800034c <display7Seg+0x14c>)
 8000260:	f000 ff49 	bl	80010f6 <HAL_GPIO_WritePin>
				break;
 8000264:	e06e      	b.n	8000344 <display7Seg+0x144>
			case 1:
				HAL_GPIO_WritePin(led7Port, seg2 | seg3, ENABLE_LED);
 8000266:	2200      	movs	r2, #0
 8000268:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800026c:	4837      	ldr	r0, [pc, #220]	; (800034c <display7Seg+0x14c>)
 800026e:	f000 ff42 	bl	80010f6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led7Port, seg1 | seg4 | seg5 | seg6 | seg7, DISABLE_LED);
 8000272:	2201      	movs	r2, #1
 8000274:	f44f 4172 	mov.w	r1, #61952	; 0xf200
 8000278:	4834      	ldr	r0, [pc, #208]	; (800034c <display7Seg+0x14c>)
 800027a:	f000 ff3c 	bl	80010f6 <HAL_GPIO_WritePin>
				break;
 800027e:	e061      	b.n	8000344 <display7Seg+0x144>
			case 2:
				HAL_GPIO_WritePin(led7Port, seg1 | seg2 | seg4 | seg5 | seg7 , ENABLE_LED);
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 4136 	mov.w	r1, #46592	; 0xb600
 8000286:	4831      	ldr	r0, [pc, #196]	; (800034c <display7Seg+0x14c>)
 8000288:	f000 ff35 	bl	80010f6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led7Port, seg3 | seg6 , DISABLE_LED);
 800028c:	2201      	movs	r2, #1
 800028e:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8000292:	482e      	ldr	r0, [pc, #184]	; (800034c <display7Seg+0x14c>)
 8000294:	f000 ff2f 	bl	80010f6 <HAL_GPIO_WritePin>
				break;
 8000298:	e054      	b.n	8000344 <display7Seg+0x144>
			case 3:
				HAL_GPIO_WritePin(led7Port, seg1 | seg2 | seg3 | seg4  | seg7 , ENABLE_LED);
 800029a:	2200      	movs	r2, #0
 800029c:	f44f 411e 	mov.w	r1, #40448	; 0x9e00
 80002a0:	482a      	ldr	r0, [pc, #168]	; (800034c <display7Seg+0x14c>)
 80002a2:	f000 ff28 	bl	80010f6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led7Port, seg5 | seg6 , DISABLE_LED);
 80002a6:	2201      	movs	r2, #1
 80002a8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80002ac:	4827      	ldr	r0, [pc, #156]	; (800034c <display7Seg+0x14c>)
 80002ae:	f000 ff22 	bl	80010f6 <HAL_GPIO_WritePin>
				break;
 80002b2:	e047      	b.n	8000344 <display7Seg+0x144>
			case 4:
				HAL_GPIO_WritePin(led7Port, seg2 | seg3 | seg6 | seg7 , ENABLE_LED);
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 414c 	mov.w	r1, #52224	; 0xcc00
 80002ba:	4824      	ldr	r0, [pc, #144]	; (800034c <display7Seg+0x14c>)
 80002bc:	f000 ff1b 	bl	80010f6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led7Port, seg1 | seg4 | seg5 , DISABLE_LED);
 80002c0:	2201      	movs	r2, #1
 80002c2:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 80002c6:	4821      	ldr	r0, [pc, #132]	; (800034c <display7Seg+0x14c>)
 80002c8:	f000 ff15 	bl	80010f6 <HAL_GPIO_WritePin>
				break;
 80002cc:	e03a      	b.n	8000344 <display7Seg+0x144>
			case 5:
				HAL_GPIO_WritePin(led7Port, seg1 | seg3  | seg4 | seg6 | seg7 , ENABLE_LED);
 80002ce:	2200      	movs	r2, #0
 80002d0:	f44f 415a 	mov.w	r1, #55808	; 0xda00
 80002d4:	481d      	ldr	r0, [pc, #116]	; (800034c <display7Seg+0x14c>)
 80002d6:	f000 ff0e 	bl	80010f6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led7Port, seg5 | seg2 , DISABLE_LED);
 80002da:	2201      	movs	r2, #1
 80002dc:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80002e0:	481a      	ldr	r0, [pc, #104]	; (800034c <display7Seg+0x14c>)
 80002e2:	f000 ff08 	bl	80010f6 <HAL_GPIO_WritePin>
				break;
 80002e6:	e02d      	b.n	8000344 <display7Seg+0x144>
			case 6:
				HAL_GPIO_WritePin(led7Port, seg1 | seg3 | seg4 | seg5 | seg6 | seg7 , ENABLE_LED);
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 80002ee:	4817      	ldr	r0, [pc, #92]	; (800034c <display7Seg+0x14c>)
 80002f0:	f000 ff01 	bl	80010f6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led7Port, seg2 , DISABLE_LED);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002fa:	4814      	ldr	r0, [pc, #80]	; (800034c <display7Seg+0x14c>)
 80002fc:	f000 fefb 	bl	80010f6 <HAL_GPIO_WritePin>
				break;
 8000300:	e020      	b.n	8000344 <display7Seg+0x144>
			case 7:
				HAL_GPIO_WritePin(led7Port, seg1 | seg2 | seg3 , ENABLE_LED);
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8000308:	4810      	ldr	r0, [pc, #64]	; (800034c <display7Seg+0x14c>)
 800030a:	f000 fef4 	bl	80010f6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led7Port,  seg4 | seg5 | seg6 | seg7 , DISABLE_LED);
 800030e:	2201      	movs	r2, #1
 8000310:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <display7Seg+0x14c>)
 8000316:	f000 feee 	bl	80010f6 <HAL_GPIO_WritePin>
				break;
 800031a:	e013      	b.n	8000344 <display7Seg+0x144>
			case 8:
				HAL_GPIO_WritePin(led7Port, seg1 | seg2 | seg3 | seg4 | seg5 | seg6 | seg7, ENABLE_LED);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 8000322:	480a      	ldr	r0, [pc, #40]	; (800034c <display7Seg+0x14c>)
 8000324:	f000 fee7 	bl	80010f6 <HAL_GPIO_WritePin>
				break;
 8000328:	e00c      	b.n	8000344 <display7Seg+0x144>
			case 9:
				HAL_GPIO_WritePin(led7Port, seg1 | seg2 | seg3 | seg4 | seg6 | seg7, ENABLE_LED);
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 415e 	mov.w	r1, #56832	; 0xde00
 8000330:	4806      	ldr	r0, [pc, #24]	; (800034c <display7Seg+0x14c>)
 8000332:	f000 fee0 	bl	80010f6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led7Port, seg5 , DISABLE_LED);
 8000336:	2201      	movs	r2, #1
 8000338:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800033c:	4803      	ldr	r0, [pc, #12]	; (800034c <display7Seg+0x14c>)
 800033e:	f000 feda 	bl	80010f6 <HAL_GPIO_WritePin>
				break;
 8000342:	bf00      	nop
		}
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	40010c00 	.word	0x40010c00

08000350 <randomNumber>:

int randomNumber(int min, int max){
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	6039      	str	r1, [r7, #0]
	return min + rand() % (max + 1 - min);
 800035a:	f001 fefb 	bl	8002154 <rand>
 800035e:	4602      	mov	r2, r0
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	1c59      	adds	r1, r3, #1
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	1acb      	subs	r3, r1, r3
 8000368:	fb92 f1f3 	sdiv	r1, r2, r3
 800036c:	fb03 f301 	mul.w	r3, r3, r1
 8000370:	1ad2      	subs	r2, r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4413      	add	r3, r2
}
 8000376:	4618      	mov	r0, r3
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <update7Seg>:

void update7Seg(){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(enPort, EN1 | EN2 | EN3 , 1);
 8000386:	2201      	movs	r2, #1
 8000388:	210e      	movs	r1, #14
 800038a:	480d      	ldr	r0, [pc, #52]	; (80003c0 <update7Seg+0x40>)
 800038c:	f000 feb3 	bl	80010f6 <HAL_GPIO_WritePin>
	for(int i = 0; i < 3; i++)
 8000390:	2300      	movs	r3, #0
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	e00b      	b.n	80003ae <update7Seg+0x2e>
	led_buffer[i] = randomNumber(0,9);
 8000396:	2109      	movs	r1, #9
 8000398:	2000      	movs	r0, #0
 800039a:	f7ff ffd9 	bl	8000350 <randomNumber>
 800039e:	4602      	mov	r2, r0
 80003a0:	4908      	ldr	r1, [pc, #32]	; (80003c4 <update7Seg+0x44>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < 3; i++)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2b02      	cmp	r3, #2
 80003b2:	ddf0      	ble.n	8000396 <update7Seg+0x16>
//	led_buffer[i] = 9;
}
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40010c00 	.word	0x40010c00
 80003c4:	200000a4 	.word	0x200000a4

080003c8 <is_Equal>:

int is_Equal(){
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	if(led_buffer[0] == 0 && led_buffer[1] == 0 && led_buffer[2] == 0) return 0;
 80003cc:	4b10      	ldr	r3, [pc, #64]	; (8000410 <is_Equal+0x48>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d109      	bne.n	80003e8 <is_Equal+0x20>
 80003d4:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <is_Equal+0x48>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d105      	bne.n	80003e8 <is_Equal+0x20>
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <is_Equal+0x48>)
 80003de:	689b      	ldr	r3, [r3, #8]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d101      	bne.n	80003e8 <is_Equal+0x20>
 80003e4:	2300      	movs	r3, #0
 80003e6:	e00e      	b.n	8000406 <is_Equal+0x3e>
	return (led_buffer[0] == led_buffer[1] && led_buffer[1] == led_buffer[2]);
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <is_Equal+0x48>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <is_Equal+0x48>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d107      	bne.n	8000404 <is_Equal+0x3c>
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <is_Equal+0x48>)
 80003f6:	685a      	ldr	r2, [r3, #4]
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <is_Equal+0x48>)
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d101      	bne.n	8000404 <is_Equal+0x3c>
 8000400:	2301      	movs	r3, #1
 8000402:	e000      	b.n	8000406 <is_Equal+0x3e>
 8000404:	2300      	movs	r3, #0
}
 8000406:	4618      	mov	r0, r3
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	200000a4 	.word	0x200000a4

08000414 <fsm_control_7Seg>:

int flag = 1;
void fsm_control_7Seg(){
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	if(is_Equal()){
 8000418:	f7ff ffd6 	bl	80003c8 <is_Equal>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d018      	beq.n	8000454 <fsm_control_7Seg+0x40>
		if(timer1_flag){
 8000422:	4b37      	ldr	r3, [pc, #220]	; (8000500 <fsm_control_7Seg+0xec>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d068      	beq.n	80004fc <fsm_control_7Seg+0xe8>
			setTimer1(500);
 800042a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800042e:	f000 fad5 	bl	80009dc <setTimer1>
			timer1_flag = 0;
 8000432:	4b33      	ldr	r3, [pc, #204]	; (8000500 <fsm_control_7Seg+0xec>)
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(ledPort,singleLed);
 8000438:	2108      	movs	r1, #8
 800043a:	4832      	ldr	r0, [pc, #200]	; (8000504 <fsm_control_7Seg+0xf0>)
 800043c:	f000 fe73 	bl	8001126 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(enPort, EN1 | EN2 | EN3);
 8000440:	210e      	movs	r1, #14
 8000442:	4831      	ldr	r0, [pc, #196]	; (8000508 <fsm_control_7Seg+0xf4>)
 8000444:	f000 fe6f 	bl	8001126 <HAL_GPIO_TogglePin>
			display7Seg(led_buffer[0]);
 8000448:	4b30      	ldr	r3, [pc, #192]	; (800050c <fsm_control_7Seg+0xf8>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff fed7 	bl	8000200 <display7Seg>
			  		break;
			  	default: break;
			}
		}
	}
}
 8000452:	e053      	b.n	80004fc <fsm_control_7Seg+0xe8>
		if(timer2_flag){
 8000454:	4b2e      	ldr	r3, [pc, #184]	; (8000510 <fsm_control_7Seg+0xfc>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d04c      	beq.n	80004f6 <fsm_control_7Seg+0xe2>
			setTimer2(500);
 800045c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000460:	f000 fad8 	bl	8000a14 <setTimer2>
			timer2_flag = 0;
 8000464:	4b2a      	ldr	r3, [pc, #168]	; (8000510 <fsm_control_7Seg+0xfc>)
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(enPort, EN1 | EN2 | EN3 , 1);
 800046a:	2201      	movs	r2, #1
 800046c:	210e      	movs	r1, #14
 800046e:	4826      	ldr	r0, [pc, #152]	; (8000508 <fsm_control_7Seg+0xf4>)
 8000470:	f000 fe41 	bl	80010f6 <HAL_GPIO_WritePin>
			switch(flag){
 8000474:	4b27      	ldr	r3, [pc, #156]	; (8000514 <fsm_control_7Seg+0x100>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b03      	cmp	r3, #3
 800047a:	d02a      	beq.n	80004d2 <fsm_control_7Seg+0xbe>
 800047c:	2b03      	cmp	r3, #3
 800047e:	dc3c      	bgt.n	80004fa <fsm_control_7Seg+0xe6>
 8000480:	2b01      	cmp	r3, #1
 8000482:	d002      	beq.n	800048a <fsm_control_7Seg+0x76>
 8000484:	2b02      	cmp	r3, #2
 8000486:	d012      	beq.n	80004ae <fsm_control_7Seg+0x9a>
			  	default: break;
 8000488:	e037      	b.n	80004fa <fsm_control_7Seg+0xe6>
					HAL_GPIO_WritePin(enPort, EN1, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2102      	movs	r1, #2
 800048e:	481e      	ldr	r0, [pc, #120]	; (8000508 <fsm_control_7Seg+0xf4>)
 8000490:	f000 fe31 	bl	80010f6 <HAL_GPIO_WritePin>
			  		display7Seg(led_buffer[flag - 1]);
 8000494:	4b1f      	ldr	r3, [pc, #124]	; (8000514 <fsm_control_7Seg+0x100>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	3b01      	subs	r3, #1
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <fsm_control_7Seg+0xf8>)
 800049c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff fead 	bl	8000200 <display7Seg>
			  		flag = 2;
 80004a6:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <fsm_control_7Seg+0x100>)
 80004a8:	2202      	movs	r2, #2
 80004aa:	601a      	str	r2, [r3, #0]
			  		break;
 80004ac:	e026      	b.n	80004fc <fsm_control_7Seg+0xe8>
			  		HAL_GPIO_WritePin(enPort, EN2, 0);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2104      	movs	r1, #4
 80004b2:	4815      	ldr	r0, [pc, #84]	; (8000508 <fsm_control_7Seg+0xf4>)
 80004b4:	f000 fe1f 	bl	80010f6 <HAL_GPIO_WritePin>
			  		display7Seg(led_buffer[flag - 1]);
 80004b8:	4b16      	ldr	r3, [pc, #88]	; (8000514 <fsm_control_7Seg+0x100>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	3b01      	subs	r3, #1
 80004be:	4a13      	ldr	r2, [pc, #76]	; (800050c <fsm_control_7Seg+0xf8>)
 80004c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fe9b 	bl	8000200 <display7Seg>
			  		flag = 3;
 80004ca:	4b12      	ldr	r3, [pc, #72]	; (8000514 <fsm_control_7Seg+0x100>)
 80004cc:	2203      	movs	r2, #3
 80004ce:	601a      	str	r2, [r3, #0]
			  		break;
 80004d0:	e014      	b.n	80004fc <fsm_control_7Seg+0xe8>
			  		HAL_GPIO_WritePin(enPort, EN3, 0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2108      	movs	r1, #8
 80004d6:	480c      	ldr	r0, [pc, #48]	; (8000508 <fsm_control_7Seg+0xf4>)
 80004d8:	f000 fe0d 	bl	80010f6 <HAL_GPIO_WritePin>
			  		display7Seg(led_buffer[flag - 1]);
 80004dc:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <fsm_control_7Seg+0x100>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3b01      	subs	r3, #1
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <fsm_control_7Seg+0xf8>)
 80004e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff fe89 	bl	8000200 <display7Seg>
			  		flag = 1;
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <fsm_control_7Seg+0x100>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	601a      	str	r2, [r3, #0]
			  		break;
 80004f4:	e002      	b.n	80004fc <fsm_control_7Seg+0xe8>
		}
 80004f6:	bf00      	nop
 80004f8:	e000      	b.n	80004fc <fsm_control_7Seg+0xe8>
			  	default: break;
 80004fa:	bf00      	nop
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	200000bc 	.word	0x200000bc
 8000504:	40010800 	.word	0x40010800
 8000508:	40010c00 	.word	0x40010c00
 800050c:	200000a4 	.word	0x200000a4
 8000510:	200000c0 	.word	0x200000c0
 8000514:	20000014 	.word	0x20000014

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 faea 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f812 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f898 	bl	8000658 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000528:	f000 f84a 	bl	80005c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <main+0x2c>)
 800052e:	f001 fa4b 	bl	80019c8 <HAL_TIM_Base_Start_IT>

  setTimer1(0);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fa52 	bl	80009dc <setTimer1>
  setTimer2(0);
 8000538:	2000      	movs	r0, #0
 800053a:	f000 fa6b 	bl	8000a14 <setTimer2>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_control_7Seg();
 800053e:	f7ff ff69 	bl	8000414 <fsm_control_7Seg>
 8000542:	e7fc      	b.n	800053e <main+0x26>
 8000544:	200000cc 	.word	0x200000cc

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b090      	sub	sp, #64	; 0x40
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0318 	add.w	r3, r7, #24
 8000552:	2228      	movs	r2, #40	; 0x28
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f001 fdf4 	bl	8002144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056a:	2302      	movs	r3, #2
 800056c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056e:	2301      	movs	r3, #1
 8000570:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000572:	2310      	movs	r3, #16
 8000574:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000576:	2300      	movs	r3, #0
 8000578:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0318 	add.w	r3, r7, #24
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fdea 	bl	8001158 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800058a:	f000 f8d3 	bl	8000734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 f856 	bl	8001658 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005b2:	f000 f8bf 	bl	8000734 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3740      	adds	r7, #64	; 0x40
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d4:	463b      	mov	r3, r7
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <MX_TIM2_Init+0x94>)
 80005de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_TIM2_Init+0x94>)
 80005e6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80005ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_TIM2_Init+0x94>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_TIM2_Init+0x94>)
 80005f4:	2209      	movs	r2, #9
 80005f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <MX_TIM2_Init+0x94>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_TIM2_Init+0x94>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000604:	4813      	ldr	r0, [pc, #76]	; (8000654 <MX_TIM2_Init+0x94>)
 8000606:	f001 f98f 	bl	8001928 <HAL_TIM_Base_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000610:	f000 f890 	bl	8000734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000618:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	4619      	mov	r1, r3
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <MX_TIM2_Init+0x94>)
 8000622:	f001 fb25 	bl	8001c70 <HAL_TIM_ConfigClockSource>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800062c:	f000 f882 	bl	8000734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000630:	2300      	movs	r3, #0
 8000632:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	4619      	mov	r1, r3
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_TIM2_Init+0x94>)
 800063e:	f001 fced 	bl	800201c <HAL_TIMEx_MasterConfigSynchronization>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000648:	f000 f874 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000cc 	.word	0x200000cc

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <MX_GPIO_Init+0xb8>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <MX_GPIO_Init+0xb8>)
 8000672:	f043 0304 	orr.w	r3, r3, #4
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <MX_GPIO_Init+0xb8>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <MX_GPIO_Init+0xb8>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <MX_GPIO_Init+0xb8>)
 800068a:	f043 0308 	orr.w	r3, r3, #8
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MX_GPIO_Init+0xb8>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0308 	and.w	r3, r3, #8
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	2108      	movs	r1, #8
 80006a0:	481c      	ldr	r0, [pc, #112]	; (8000714 <MX_GPIO_Init+0xbc>)
 80006a2:	f000 fd28 	bl	80010f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80006a6:	2200      	movs	r2, #0
 80006a8:	f64f 610e 	movw	r1, #65038	; 0xfe0e
 80006ac:	481a      	ldr	r0, [pc, #104]	; (8000718 <MX_GPIO_Init+0xc0>)
 80006ae:	f000 fd22 	bl	80010f6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006b2:	2308      	movs	r3, #8
 80006b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2302      	movs	r3, #2
 80006c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	4619      	mov	r1, r3
 80006c8:	4812      	ldr	r0, [pc, #72]	; (8000714 <MX_GPIO_Init+0xbc>)
 80006ca:	f000 fb83 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80006ce:	f64f 630e 	movw	r3, #65038	; 0xfe0e
 80006d2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2302      	movs	r3, #2
 80006de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	4619      	mov	r1, r3
 80006e6:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_GPIO_Init+0xc0>)
 80006e8:	f000 fb74 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	4619      	mov	r1, r3
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_GPIO_Init+0xbc>)
 8000702:	f000 fb67 	bl	8000dd4 <HAL_GPIO_Init>

}
 8000706:	bf00      	nop
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000
 8000714:	40010800 	.word	0x40010800
 8000718:	40010c00 	.word	0x40010c00

0800071c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	timerRun();
 8000724:	f000 f992 	bl	8000a4c <timerRun>
	getKeyInput();
 8000728:	f7ff fd16 	bl	8000158 <getKeyInput>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_MspInit+0x5c>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <HAL_MspInit+0x5c>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_MspInit+0x5c>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_MspInit+0x5c>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	4a0e      	ldr	r2, [pc, #56]	; (800079c <HAL_MspInit+0x5c>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	61d3      	str	r3, [r2, #28]
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_MspInit+0x5c>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <HAL_MspInit+0x60>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_MspInit+0x60>)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	40021000 	.word	0x40021000
 80007a0:	40010000 	.word	0x40010000

080007a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007b4:	d113      	bne.n	80007de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_TIM_Base_MspInit+0x44>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <HAL_TIM_Base_MspInit+0x44>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	61d3      	str	r3, [r2, #28]
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_TIM_Base_MspInit+0x44>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	201c      	movs	r0, #28
 80007d4:	f000 fac7 	bl	8000d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007d8:	201c      	movs	r0, #28
 80007da:	f000 fae0 	bl	8000d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <NMI_Handler+0x4>

080007f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <HardFault_Handler+0x4>

080007f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <MemManage_Handler+0x4>

080007fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <BusFault_Handler+0x4>

08000804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <UsageFault_Handler+0x4>

0800080a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr

08000822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr

0800082e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000832:	f000 f9a5 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <TIM2_IRQHandler+0x10>)
 8000842:	f001 f90d 	bl	8001a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000cc 	.word	0x200000cc

08000850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
	return 1;
 8000854:	2301      	movs	r3, #1
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <_kill>:

int _kill(int pid, int sig)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000868:	f001 fc42 	bl	80020f0 <__errno>
 800086c:	4603      	mov	r3, r0
 800086e:	2216      	movs	r2, #22
 8000870:	601a      	str	r2, [r3, #0]
	return -1;
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_exit>:

void _exit (int status)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000886:	f04f 31ff 	mov.w	r1, #4294967295
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ffe7 	bl	800085e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000890:	e7fe      	b.n	8000890 <_exit+0x12>

08000892 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b086      	sub	sp, #24
 8000896:	af00      	add	r7, sp, #0
 8000898:	60f8      	str	r0, [r7, #12]
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	e00a      	b.n	80008ba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008a4:	f3af 8000 	nop.w
 80008a8:	4601      	mov	r1, r0
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	1c5a      	adds	r2, r3, #1
 80008ae:	60ba      	str	r2, [r7, #8]
 80008b0:	b2ca      	uxtb	r2, r1
 80008b2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	3301      	adds	r3, #1
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	697a      	ldr	r2, [r7, #20]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	429a      	cmp	r2, r3
 80008c0:	dbf0      	blt.n	80008a4 <_read+0x12>
	}

return len;
 80008c2:	687b      	ldr	r3, [r7, #4]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	e009      	b.n	80008f2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	60ba      	str	r2, [r7, #8]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	3301      	adds	r3, #1
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	697a      	ldr	r2, [r7, #20]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	dbf1      	blt.n	80008de <_write+0x12>
	}
	return len;
 80008fa:	687b      	ldr	r3, [r7, #4]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <_close>:

int _close(int file)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	return -1;
 800090c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800092a:	605a      	str	r2, [r3, #4]
	return 0;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <_isatty>:

int _isatty(int file)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	return 1;
 8000940:	2301      	movs	r3, #1
}
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
	return 0;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800096c:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <_sbrk+0x5c>)
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <_sbrk+0x60>)
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <_sbrk+0x64>)
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <_sbrk+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	429a      	cmp	r2, r3
 8000992:	d207      	bcs.n	80009a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000994:	f001 fbac 	bl	80020f0 <__errno>
 8000998:	4603      	mov	r3, r0
 800099a:	220c      	movs	r2, #12
 800099c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	e009      	b.n	80009b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <_sbrk+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009aa:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <_sbrk+0x64>)
 80009b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b6:	68fb      	ldr	r3, [r7, #12]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20002800 	.word	0x20002800
 80009c4:	00000400 	.word	0x00000400
 80009c8:	200000b0 	.word	0x200000b0
 80009cc:	20000128 	.word	0x20000128

080009d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <setTimer1>:

int timer1_counter = 0;
int timer2_counter = 0;
int timer1_flag = 0;
int timer2_flag = 0;
void setTimer1(int duration){
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <setTimer1+0x2c>)
 80009e8:	fb82 1203 	smull	r1, r2, r2, r3
 80009ec:	1092      	asrs	r2, r2, #2
 80009ee:	17db      	asrs	r3, r3, #31
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <setTimer1+0x30>)
 80009f4:	6013      	str	r3, [r2, #0]
	timer1_flag = 1;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <setTimer1+0x34>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	601a      	str	r2, [r3, #0]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	66666667 	.word	0x66666667
 8000a0c:	200000b4 	.word	0x200000b4
 8000a10:	200000bc 	.word	0x200000bc

08000a14 <setTimer2>:

void setTimer2(int duration){
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <setTimer2+0x2c>)
 8000a20:	fb82 1203 	smull	r1, r2, r2, r3
 8000a24:	1092      	asrs	r2, r2, #2
 8000a26:	17db      	asrs	r3, r3, #31
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <setTimer2+0x30>)
 8000a2c:	6013      	str	r3, [r2, #0]
	timer2_flag = 1;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <setTimer2+0x34>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	66666667 	.word	0x66666667
 8000a44:	200000b8 	.word	0x200000b8
 8000a48:	200000c0 	.word	0x200000c0

08000a4c <timerRun>:

void timerRun(){
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <timerRun+0x4c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	dd0b      	ble.n	8000a70 <timerRun+0x24>
		timer1_counter--;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <timerRun+0x4c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <timerRun+0x4c>)
 8000a60:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <timerRun+0x4c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d102      	bne.n	8000a70 <timerRun+0x24>
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <timerRun+0x50>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <timerRun+0x54>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	dd0b      	ble.n	8000a90 <timerRun+0x44>
		timer2_counter--;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <timerRun+0x54>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <timerRun+0x54>)
 8000a80:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <timerRun+0x54>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d102      	bne.n	8000a90 <timerRun+0x44>
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <timerRun+0x58>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	601a      	str	r2, [r3, #0]
	}
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	200000b4 	.word	0x200000b4
 8000a9c:	200000bc 	.word	0x200000bc
 8000aa0:	200000b8 	.word	0x200000b8
 8000aa4:	200000c0 	.word	0x200000c0

08000aa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	; (8000aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ace:	f7ff ff7f 	bl	80009d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f001 fb13 	bl	80020fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ad6:	f7ff fd1f 	bl	8000518 <main>
  bx lr
 8000ada:	4770      	bx	lr
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000ae4:	080032f8 	.word	0x080032f8
  ldr r2, =_sbss
 8000ae8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000aec:	20000128 	.word	0x20000128

08000af0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_2_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_Init+0x28>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_Init+0x28>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 f923 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0a:	200f      	movs	r0, #15
 8000b0c:	f000 f808 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b10:	f7ff fe16 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40022000 	.word	0x40022000

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x54>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x58>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f93b 	bl	8000dba <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00e      	b.n	8000b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d80a      	bhi.n	8000b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f000 f903 	bl	8000d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <HAL_InitTick+0x5c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000018 	.word	0x20000018
 8000b78:	20000020 	.word	0x20000020
 8000b7c:	2000001c 	.word	0x2000001c

08000b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_IncTick+0x1c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a03      	ldr	r2, [pc, #12]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	20000020 	.word	0x20000020
 8000ba0:	20000114 	.word	0x20000114

08000ba4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <HAL_GetTick+0x10>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	20000114 	.word	0x20000114

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4906      	ldr	r1, [pc, #24]	; (8000c50 <__NVIC_EnableIRQ+0x34>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff90 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff2d 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff42 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff90 	bl	8000ca8 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5f 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff35 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffa2 	bl	8000d0c <SysTick_Config>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b08b      	sub	sp, #44	; 0x2c
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de6:	e148      	b.n	800107a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000de8:	2201      	movs	r2, #1
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	69fa      	ldr	r2, [r7, #28]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f040 8137 	bne.w	8001074 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	4aa3      	ldr	r2, [pc, #652]	; (8001098 <HAL_GPIO_Init+0x2c4>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d05e      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e10:	4aa1      	ldr	r2, [pc, #644]	; (8001098 <HAL_GPIO_Init+0x2c4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d875      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e16:	4aa1      	ldr	r2, [pc, #644]	; (800109c <HAL_GPIO_Init+0x2c8>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d058      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e1c:	4a9f      	ldr	r2, [pc, #636]	; (800109c <HAL_GPIO_Init+0x2c8>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d86f      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e22:	4a9f      	ldr	r2, [pc, #636]	; (80010a0 <HAL_GPIO_Init+0x2cc>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d052      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e28:	4a9d      	ldr	r2, [pc, #628]	; (80010a0 <HAL_GPIO_Init+0x2cc>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d869      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e2e:	4a9d      	ldr	r2, [pc, #628]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d04c      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e34:	4a9b      	ldr	r2, [pc, #620]	; (80010a4 <HAL_GPIO_Init+0x2d0>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d863      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e3a:	4a9b      	ldr	r2, [pc, #620]	; (80010a8 <HAL_GPIO_Init+0x2d4>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d046      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e40:	4a99      	ldr	r2, [pc, #612]	; (80010a8 <HAL_GPIO_Init+0x2d4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d85d      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e46:	2b12      	cmp	r3, #18
 8000e48:	d82a      	bhi.n	8000ea0 <HAL_GPIO_Init+0xcc>
 8000e4a:	2b12      	cmp	r3, #18
 8000e4c:	d859      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e4e:	a201      	add	r2, pc, #4	; (adr r2, 8000e54 <HAL_GPIO_Init+0x80>)
 8000e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e54:	08000ecf 	.word	0x08000ecf
 8000e58:	08000ea9 	.word	0x08000ea9
 8000e5c:	08000ebb 	.word	0x08000ebb
 8000e60:	08000efd 	.word	0x08000efd
 8000e64:	08000f03 	.word	0x08000f03
 8000e68:	08000f03 	.word	0x08000f03
 8000e6c:	08000f03 	.word	0x08000f03
 8000e70:	08000f03 	.word	0x08000f03
 8000e74:	08000f03 	.word	0x08000f03
 8000e78:	08000f03 	.word	0x08000f03
 8000e7c:	08000f03 	.word	0x08000f03
 8000e80:	08000f03 	.word	0x08000f03
 8000e84:	08000f03 	.word	0x08000f03
 8000e88:	08000f03 	.word	0x08000f03
 8000e8c:	08000f03 	.word	0x08000f03
 8000e90:	08000f03 	.word	0x08000f03
 8000e94:	08000f03 	.word	0x08000f03
 8000e98:	08000eb1 	.word	0x08000eb1
 8000e9c:	08000ec5 	.word	0x08000ec5
 8000ea0:	4a82      	ldr	r2, [pc, #520]	; (80010ac <HAL_GPIO_Init+0x2d8>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ea6:	e02c      	b.n	8000f02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	623b      	str	r3, [r7, #32]
          break;
 8000eae:	e029      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	623b      	str	r3, [r7, #32]
          break;
 8000eb8:	e024      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	623b      	str	r3, [r7, #32]
          break;
 8000ec2:	e01f      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	330c      	adds	r3, #12
 8000eca:	623b      	str	r3, [r7, #32]
          break;
 8000ecc:	e01a      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	623b      	str	r3, [r7, #32]
          break;
 8000eda:	e013      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d105      	bne.n	8000ef0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69fa      	ldr	r2, [r7, #28]
 8000eec:	611a      	str	r2, [r3, #16]
          break;
 8000eee:	e009      	b.n	8000f04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69fa      	ldr	r2, [r7, #28]
 8000ef8:	615a      	str	r2, [r3, #20]
          break;
 8000efa:	e003      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
          break;
 8000f00:	e000      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          break;
 8000f02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	2bff      	cmp	r3, #255	; 0xff
 8000f08:	d801      	bhi.n	8000f0e <HAL_GPIO_Init+0x13a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	e001      	b.n	8000f12 <HAL_GPIO_Init+0x13e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3304      	adds	r3, #4
 8000f12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	2bff      	cmp	r3, #255	; 0xff
 8000f18:	d802      	bhi.n	8000f20 <HAL_GPIO_Init+0x14c>
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	e002      	b.n	8000f26 <HAL_GPIO_Init+0x152>
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	3b08      	subs	r3, #8
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	401a      	ands	r2, r3
 8000f38:	6a39      	ldr	r1, [r7, #32]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f40:	431a      	orrs	r2, r3
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 8090 	beq.w	8001074 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f54:	4b56      	ldr	r3, [pc, #344]	; (80010b0 <HAL_GPIO_Init+0x2dc>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a55      	ldr	r2, [pc, #340]	; (80010b0 <HAL_GPIO_Init+0x2dc>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b53      	ldr	r3, [pc, #332]	; (80010b0 <HAL_GPIO_Init+0x2dc>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f6c:	4a51      	ldr	r2, [pc, #324]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <HAL_GPIO_Init+0x2e4>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d00d      	beq.n	8000fb4 <HAL_GPIO_Init+0x1e0>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a48      	ldr	r2, [pc, #288]	; (80010bc <HAL_GPIO_Init+0x2e8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d007      	beq.n	8000fb0 <HAL_GPIO_Init+0x1dc>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a47      	ldr	r2, [pc, #284]	; (80010c0 <HAL_GPIO_Init+0x2ec>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d101      	bne.n	8000fac <HAL_GPIO_Init+0x1d8>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e004      	b.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000fac:	2303      	movs	r3, #3
 8000fae:	e002      	b.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb8:	f002 0203 	and.w	r2, r2, #3
 8000fbc:	0092      	lsls	r2, r2, #2
 8000fbe:	4093      	lsls	r3, r2
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fc6:	493b      	ldr	r1, [pc, #236]	; (80010b4 <HAL_GPIO_Init+0x2e0>)
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d006      	beq.n	8000fee <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fe0:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4937      	ldr	r1, [pc, #220]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	600b      	str	r3, [r1, #0]
 8000fec:	e006      	b.n	8000ffc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fee:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	4933      	ldr	r1, [pc, #204]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d006      	beq.n	8001016 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	492d      	ldr	r1, [pc, #180]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	604b      	str	r3, [r1, #4]
 8001014:	e006      	b.n	8001024 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	43db      	mvns	r3, r3
 800101e:	4929      	ldr	r1, [pc, #164]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8001020:	4013      	ands	r3, r2
 8001022:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	4923      	ldr	r1, [pc, #140]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	608b      	str	r3, [r1, #8]
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	43db      	mvns	r3, r3
 8001046:	491f      	ldr	r1, [pc, #124]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8001048:	4013      	ands	r3, r2
 800104a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d006      	beq.n	8001066 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	4919      	ldr	r1, [pc, #100]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	60cb      	str	r3, [r1, #12]
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	43db      	mvns	r3, r3
 800106e:	4915      	ldr	r1, [pc, #84]	; (80010c4 <HAL_GPIO_Init+0x2f0>)
 8001070:	4013      	ands	r3, r2
 8001072:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	3301      	adds	r3, #1
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	fa22 f303 	lsr.w	r3, r2, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	f47f aeaf 	bne.w	8000de8 <HAL_GPIO_Init+0x14>
  }
}
 800108a:	bf00      	nop
 800108c:	bf00      	nop
 800108e:	372c      	adds	r7, #44	; 0x2c
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	10320000 	.word	0x10320000
 800109c:	10310000 	.word	0x10310000
 80010a0:	10220000 	.word	0x10220000
 80010a4:	10210000 	.word	0x10210000
 80010a8:	10120000 	.word	0x10120000
 80010ac:	10110000 	.word	0x10110000
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010000 	.word	0x40010000
 80010b8:	40010800 	.word	0x40010800
 80010bc:	40010c00 	.word	0x40010c00
 80010c0:	40011000 	.word	0x40011000
 80010c4:	40010400 	.word	0x40010400

080010c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	4013      	ands	r3, r2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e001      	b.n	80010ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	807b      	strh	r3, [r7, #2]
 8001102:	4613      	mov	r3, r2
 8001104:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001106:	787b      	ldrb	r3, [r7, #1]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800110c:	887a      	ldrh	r2, [r7, #2]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001112:	e003      	b.n	800111c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	041a      	lsls	r2, r3, #16
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	611a      	str	r2, [r3, #16]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001126:	b480      	push	{r7}
 8001128:	b085      	sub	sp, #20
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	460b      	mov	r3, r1
 8001130:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001138:	887a      	ldrh	r2, [r7, #2]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4013      	ands	r3, r2
 800113e:	041a      	lsls	r2, r3, #16
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	43d9      	mvns	r1, r3
 8001144:	887b      	ldrh	r3, [r7, #2]
 8001146:	400b      	ands	r3, r1
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	611a      	str	r2, [r3, #16]
}
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e26c      	b.n	8001644 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 8087 	beq.w	8001286 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001178:	4b92      	ldr	r3, [pc, #584]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 030c 	and.w	r3, r3, #12
 8001180:	2b04      	cmp	r3, #4
 8001182:	d00c      	beq.n	800119e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001184:	4b8f      	ldr	r3, [pc, #572]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 030c 	and.w	r3, r3, #12
 800118c:	2b08      	cmp	r3, #8
 800118e:	d112      	bne.n	80011b6 <HAL_RCC_OscConfig+0x5e>
 8001190:	4b8c      	ldr	r3, [pc, #560]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119c:	d10b      	bne.n	80011b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119e:	4b89      	ldr	r3, [pc, #548]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d06c      	beq.n	8001284 <HAL_RCC_OscConfig+0x12c>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d168      	bne.n	8001284 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e246      	b.n	8001644 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011be:	d106      	bne.n	80011ce <HAL_RCC_OscConfig+0x76>
 80011c0:	4b80      	ldr	r3, [pc, #512]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a7f      	ldr	r2, [pc, #508]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80011c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	e02e      	b.n	800122c <HAL_RCC_OscConfig+0xd4>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x98>
 80011d6:	4b7b      	ldr	r3, [pc, #492]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a7a      	ldr	r2, [pc, #488]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b78      	ldr	r3, [pc, #480]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a77      	ldr	r2, [pc, #476]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e01d      	b.n	800122c <HAL_RCC_OscConfig+0xd4>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f8:	d10c      	bne.n	8001214 <HAL_RCC_OscConfig+0xbc>
 80011fa:	4b72      	ldr	r3, [pc, #456]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a71      	ldr	r2, [pc, #452]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b6f      	ldr	r3, [pc, #444]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a6e      	ldr	r2, [pc, #440]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 800120c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e00b      	b.n	800122c <HAL_RCC_OscConfig+0xd4>
 8001214:	4b6b      	ldr	r3, [pc, #428]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a6a      	ldr	r2, [pc, #424]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 800121a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b68      	ldr	r3, [pc, #416]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a67      	ldr	r2, [pc, #412]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d013      	beq.n	800125c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fcb6 	bl	8000ba4 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800123c:	f7ff fcb2 	bl	8000ba4 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b64      	cmp	r3, #100	; 0x64
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e1fa      	b.n	8001644 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124e:	4b5d      	ldr	r3, [pc, #372]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f0      	beq.n	800123c <HAL_RCC_OscConfig+0xe4>
 800125a:	e014      	b.n	8001286 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fca2 	bl	8000ba4 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fc9e 	bl	8000ba4 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e1e6      	b.n	8001644 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001276:	4b53      	ldr	r3, [pc, #332]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0x10c>
 8001282:	e000      	b.n	8001286 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d063      	beq.n	800135a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001292:	4b4c      	ldr	r3, [pc, #304]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00b      	beq.n	80012b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800129e:	4b49      	ldr	r3, [pc, #292]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d11c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x18c>
 80012aa:	4b46      	ldr	r3, [pc, #280]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d116      	bne.n	80012e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b6:	4b43      	ldr	r3, [pc, #268]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <HAL_RCC_OscConfig+0x176>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d001      	beq.n	80012ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e1ba      	b.n	8001644 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ce:	4b3d      	ldr	r3, [pc, #244]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4939      	ldr	r1, [pc, #228]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e2:	e03a      	b.n	800135a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d020      	beq.n	800132e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ec:	4b36      	ldr	r3, [pc, #216]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fc57 	bl	8000ba4 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fa:	f7ff fc53 	bl	8000ba4 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e19b      	b.n	8001644 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130c:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001318:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	4927      	ldr	r1, [pc, #156]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001328:	4313      	orrs	r3, r2
 800132a:	600b      	str	r3, [r1, #0]
 800132c:	e015      	b.n	800135a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <HAL_RCC_OscConfig+0x270>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fc36 	bl	8000ba4 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800133c:	f7ff fc32 	bl	8000ba4 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e17a      	b.n	8001644 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d03a      	beq.n	80013dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d019      	beq.n	80013a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_RCC_OscConfig+0x274>)
 8001370:	2201      	movs	r2, #1
 8001372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001374:	f7ff fc16 	bl	8000ba4 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137c:	f7ff fc12 	bl	8000ba4 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e15a      	b.n	8001644 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <HAL_RCC_OscConfig+0x26c>)
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800139a:	2001      	movs	r0, #1
 800139c:	f000 faa6 	bl	80018ec <RCC_Delay>
 80013a0:	e01c      	b.n	80013dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_RCC_OscConfig+0x274>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a8:	f7ff fbfc 	bl	8000ba4 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ae:	e00f      	b.n	80013d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b0:	f7ff fbf8 	bl	8000ba4 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d908      	bls.n	80013d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e140      	b.n	8001644 <HAL_RCC_OscConfig+0x4ec>
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	42420000 	.word	0x42420000
 80013cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d0:	4b9e      	ldr	r3, [pc, #632]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1e9      	bne.n	80013b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80a6 	beq.w	8001536 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ee:	4b97      	ldr	r3, [pc, #604]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10d      	bne.n	8001416 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	4b94      	ldr	r3, [pc, #592]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a93      	ldr	r2, [pc, #588]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	61d3      	str	r3, [r2, #28]
 8001406:	4b91      	ldr	r3, [pc, #580]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001412:	2301      	movs	r3, #1
 8001414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001416:	4b8e      	ldr	r3, [pc, #568]	; (8001650 <HAL_RCC_OscConfig+0x4f8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d118      	bne.n	8001454 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001422:	4b8b      	ldr	r3, [pc, #556]	; (8001650 <HAL_RCC_OscConfig+0x4f8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a8a      	ldr	r2, [pc, #552]	; (8001650 <HAL_RCC_OscConfig+0x4f8>)
 8001428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800142e:	f7ff fbb9 	bl	8000ba4 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001436:	f7ff fbb5 	bl	8000ba4 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b64      	cmp	r3, #100	; 0x64
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e0fd      	b.n	8001644 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001448:	4b81      	ldr	r3, [pc, #516]	; (8001650 <HAL_RCC_OscConfig+0x4f8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d106      	bne.n	800146a <HAL_RCC_OscConfig+0x312>
 800145c:	4b7b      	ldr	r3, [pc, #492]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	4a7a      	ldr	r2, [pc, #488]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6213      	str	r3, [r2, #32]
 8001468:	e02d      	b.n	80014c6 <HAL_RCC_OscConfig+0x36e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0x334>
 8001472:	4b76      	ldr	r3, [pc, #472]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	4a75      	ldr	r2, [pc, #468]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	6213      	str	r3, [r2, #32]
 800147e:	4b73      	ldr	r3, [pc, #460]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4a72      	ldr	r2, [pc, #456]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 8001484:	f023 0304 	bic.w	r3, r3, #4
 8001488:	6213      	str	r3, [r2, #32]
 800148a:	e01c      	b.n	80014c6 <HAL_RCC_OscConfig+0x36e>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2b05      	cmp	r3, #5
 8001492:	d10c      	bne.n	80014ae <HAL_RCC_OscConfig+0x356>
 8001494:	4b6d      	ldr	r3, [pc, #436]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4a6c      	ldr	r2, [pc, #432]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	6213      	str	r3, [r2, #32]
 80014a0:	4b6a      	ldr	r3, [pc, #424]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4a69      	ldr	r2, [pc, #420]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6213      	str	r3, [r2, #32]
 80014ac:	e00b      	b.n	80014c6 <HAL_RCC_OscConfig+0x36e>
 80014ae:	4b67      	ldr	r3, [pc, #412]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	4a66      	ldr	r2, [pc, #408]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	6213      	str	r3, [r2, #32]
 80014ba:	4b64      	ldr	r3, [pc, #400]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	4a63      	ldr	r2, [pc, #396]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 80014c0:	f023 0304 	bic.w	r3, r3, #4
 80014c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d015      	beq.n	80014fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fb69 	bl	8000ba4 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d6:	f7ff fb65 	bl	8000ba4 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e0ab      	b.n	8001644 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ec:	4b57      	ldr	r3, [pc, #348]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0ee      	beq.n	80014d6 <HAL_RCC_OscConfig+0x37e>
 80014f8:	e014      	b.n	8001524 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fb53 	bl	8000ba4 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001500:	e00a      	b.n	8001518 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001502:	f7ff fb4f 	bl	8000ba4 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001510:	4293      	cmp	r3, r2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e095      	b.n	8001644 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001518:	4b4c      	ldr	r3, [pc, #304]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1ee      	bne.n	8001502 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001524:	7dfb      	ldrb	r3, [r7, #23]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d105      	bne.n	8001536 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800152a:	4b48      	ldr	r3, [pc, #288]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	4a47      	ldr	r2, [pc, #284]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 8001530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001534:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 8081 	beq.w	8001642 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001540:	4b42      	ldr	r3, [pc, #264]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 030c 	and.w	r3, r3, #12
 8001548:	2b08      	cmp	r3, #8
 800154a:	d061      	beq.n	8001610 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d146      	bne.n	80015e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001554:	4b3f      	ldr	r3, [pc, #252]	; (8001654 <HAL_RCC_OscConfig+0x4fc>)
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155a:	f7ff fb23 	bl	8000ba4 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001562:	f7ff fb1f 	bl	8000ba4 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e067      	b.n	8001644 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001574:	4b35      	ldr	r3, [pc, #212]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f0      	bne.n	8001562 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001588:	d108      	bne.n	800159c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800158a:	4b30      	ldr	r3, [pc, #192]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	492d      	ldr	r1, [pc, #180]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a19      	ldr	r1, [r3, #32]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	430b      	orrs	r3, r1
 80015ae:	4927      	ldr	r1, [pc, #156]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HAL_RCC_OscConfig+0x4fc>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff faf3 	bl	8000ba4 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c2:	f7ff faef 	bl	8000ba4 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e037      	b.n	8001644 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x46a>
 80015e0:	e02f      	b.n	8001642 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <HAL_RCC_OscConfig+0x4fc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fadc 	bl	8000ba4 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff fad8 	bl	8000ba4 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e020      	b.n	8001644 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x498>
 800160e:	e018      	b.n	8001642 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e013      	b.n	8001644 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_RCC_OscConfig+0x4f4>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	429a      	cmp	r2, r3
 800162e:	d106      	bne.n	800163e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163a:	429a      	cmp	r2, r3
 800163c:	d001      	beq.n	8001642 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40021000 	.word	0x40021000
 8001650:	40007000 	.word	0x40007000
 8001654:	42420060 	.word	0x42420060

08001658 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0d0      	b.n	800180e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800166c:	4b6a      	ldr	r3, [pc, #424]	; (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d910      	bls.n	800169c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b67      	ldr	r3, [pc, #412]	; (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 0207 	bic.w	r2, r3, #7
 8001682:	4965      	ldr	r1, [pc, #404]	; (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b63      	ldr	r3, [pc, #396]	; (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0b8      	b.n	800180e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d020      	beq.n	80016ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b4:	4b59      	ldr	r3, [pc, #356]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4a58      	ldr	r2, [pc, #352]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016cc:	4b53      	ldr	r3, [pc, #332]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4a52      	ldr	r2, [pc, #328]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d8:	4b50      	ldr	r3, [pc, #320]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	494d      	ldr	r1, [pc, #308]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d040      	beq.n	8001778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	4b47      	ldr	r3, [pc, #284]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d115      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e07f      	b.n	800180e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001716:	4b41      	ldr	r3, [pc, #260]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d109      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e073      	b.n	800180e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001726:	4b3d      	ldr	r3, [pc, #244]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e06b      	b.n	800180e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001736:	4b39      	ldr	r3, [pc, #228]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f023 0203 	bic.w	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4936      	ldr	r1, [pc, #216]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	4313      	orrs	r3, r2
 8001746:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001748:	f7ff fa2c 	bl	8000ba4 <HAL_GetTick>
 800174c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	e00a      	b.n	8001766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001750:	f7ff fa28 	bl	8000ba4 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e053      	b.n	800180e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 020c 	and.w	r2, r3, #12
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	429a      	cmp	r2, r3
 8001776:	d1eb      	bne.n	8001750 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001778:	4b27      	ldr	r3, [pc, #156]	; (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d210      	bcs.n	80017a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b24      	ldr	r3, [pc, #144]	; (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 0207 	bic.w	r2, r3, #7
 800178e:	4922      	ldr	r1, [pc, #136]	; (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	4313      	orrs	r3, r2
 8001794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e032      	b.n	800180e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4916      	ldr	r1, [pc, #88]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	490e      	ldr	r1, [pc, #56]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017e6:	f000 f821 	bl	800182c <HAL_RCC_GetSysClockFreq>
 80017ea:	4602      	mov	r2, r0
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	490a      	ldr	r1, [pc, #40]	; (8001820 <HAL_RCC_ClockConfig+0x1c8>)
 80017f8:	5ccb      	ldrb	r3, [r1, r3]
 80017fa:	fa22 f303 	lsr.w	r3, r2, r3
 80017fe:	4a09      	ldr	r2, [pc, #36]	; (8001824 <HAL_RCC_ClockConfig+0x1cc>)
 8001800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_ClockConfig+0x1d0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f98a 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40022000 	.word	0x40022000
 800181c:	40021000 	.word	0x40021000
 8001820:	08003194 	.word	0x08003194
 8001824:	20000018 	.word	0x20000018
 8001828:	2000001c 	.word	0x2000001c

0800182c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800182c:	b490      	push	{r4, r7}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001832:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001834:	1d3c      	adds	r4, r7, #4
 8001836:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001838:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800183c:	f240 2301 	movw	r3, #513	; 0x201
 8001840:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b04      	cmp	r3, #4
 8001864:	d002      	beq.n	800186c <HAL_RCC_GetSysClockFreq+0x40>
 8001866:	2b08      	cmp	r3, #8
 8001868:	d003      	beq.n	8001872 <HAL_RCC_GetSysClockFreq+0x46>
 800186a:	e02d      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800186c:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800186e:	623b      	str	r3, [r7, #32]
      break;
 8001870:	e02d      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	0c9b      	lsrs	r3, r3, #18
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800187e:	4413      	add	r3, r2
 8001880:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001884:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d013      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	0c5b      	lsrs	r3, r3, #17
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800189e:	4413      	add	r3, r2
 80018a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018aa:	fb02 f203 	mul.w	r2, r2, r3
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
 80018b6:	e004      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018bc:	fb02 f303 	mul.w	r3, r2, r3
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	623b      	str	r3, [r7, #32]
      break;
 80018c6:	e002      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ca:	623b      	str	r3, [r7, #32]
      break;
 80018cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ce:	6a3b      	ldr	r3, [r7, #32]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3728      	adds	r7, #40	; 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc90      	pop	{r4, r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	08003184 	.word	0x08003184
 80018e0:	40021000 	.word	0x40021000
 80018e4:	007a1200 	.word	0x007a1200
 80018e8:	003d0900 	.word	0x003d0900

080018ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <RCC_Delay+0x34>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <RCC_Delay+0x38>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	0a5b      	lsrs	r3, r3, #9
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001908:	bf00      	nop
  }
  while (Delay --);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1e5a      	subs	r2, r3, #1
 800190e:	60fa      	str	r2, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f9      	bne.n	8001908 <RCC_Delay+0x1c>
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	20000018 	.word	0x20000018
 8001924:	10624dd3 	.word	0x10624dd3

08001928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e041      	b.n	80019be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d106      	bne.n	8001954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7fe ff28 	bl	80007a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2202      	movs	r2, #2
 8001958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3304      	adds	r3, #4
 8001964:	4619      	mov	r1, r3
 8001966:	4610      	mov	r0, r2
 8001968:	f000 fa6a 	bl	8001e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d001      	beq.n	80019e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e035      	b.n	8001a4c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2202      	movs	r2, #2
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a16      	ldr	r2, [pc, #88]	; (8001a58 <HAL_TIM_Base_Start_IT+0x90>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d009      	beq.n	8001a16 <HAL_TIM_Base_Start_IT+0x4e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0a:	d004      	beq.n	8001a16 <HAL_TIM_Base_Start_IT+0x4e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <HAL_TIM_Base_Start_IT+0x94>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d111      	bne.n	8001a3a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b06      	cmp	r3, #6
 8001a26:	d010      	beq.n	8001a4a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a38:	e007      	b.n	8001a4a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0201 	orr.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40012c00 	.word	0x40012c00
 8001a5c:	40000400 	.word	0x40000400

08001a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d122      	bne.n	8001abc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d11b      	bne.n	8001abc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0202 	mvn.w	r2, #2
 8001a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f9b1 	bl	8001e0a <HAL_TIM_IC_CaptureCallback>
 8001aa8:	e005      	b.n	8001ab6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f9a4 	bl	8001df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f9b3 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d122      	bne.n	8001b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d11b      	bne.n	8001b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0204 	mvn.w	r2, #4
 8001ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f987 	bl	8001e0a <HAL_TIM_IC_CaptureCallback>
 8001afc:	e005      	b.n	8001b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f97a 	bl	8001df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f989 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d122      	bne.n	8001b64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d11b      	bne.n	8001b64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f06f 0208 	mvn.w	r2, #8
 8001b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2204      	movs	r2, #4
 8001b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f95d 	bl	8001e0a <HAL_TIM_IC_CaptureCallback>
 8001b50:	e005      	b.n	8001b5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f950 	bl	8001df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f95f 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b10      	cmp	r3, #16
 8001b70:	d122      	bne.n	8001bb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	2b10      	cmp	r3, #16
 8001b7e:	d11b      	bne.n	8001bb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f06f 0210 	mvn.w	r2, #16
 8001b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f933 	bl	8001e0a <HAL_TIM_IC_CaptureCallback>
 8001ba4:	e005      	b.n	8001bb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f926 	bl	8001df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f935 	bl	8001e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d10e      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d107      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0201 	mvn.w	r2, #1
 8001bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe fd9c 	bl	800071c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bee:	2b80      	cmp	r3, #128	; 0x80
 8001bf0:	d10e      	bne.n	8001c10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfc:	2b80      	cmp	r3, #128	; 0x80
 8001bfe:	d107      	bne.n	8001c10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 fa67 	bl	80020de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1a:	2b40      	cmp	r3, #64	; 0x40
 8001c1c:	d10e      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c28:	2b40      	cmp	r3, #64	; 0x40
 8001c2a:	d107      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f8f9 	bl	8001e2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	d10e      	bne.n	8001c68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0320 	and.w	r3, r3, #32
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d107      	bne.n	8001c68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0220 	mvn.w	r2, #32
 8001c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 fa32 	bl	80020cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_TIM_ConfigClockSource+0x18>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e0b3      	b.n	8001df0 <HAL_TIM_ConfigClockSource+0x180>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2202      	movs	r2, #2
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ca6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc0:	d03e      	beq.n	8001d40 <HAL_TIM_ConfigClockSource+0xd0>
 8001cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc6:	f200 8087 	bhi.w	8001dd8 <HAL_TIM_ConfigClockSource+0x168>
 8001cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cce:	f000 8085 	beq.w	8001ddc <HAL_TIM_ConfigClockSource+0x16c>
 8001cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cd6:	d87f      	bhi.n	8001dd8 <HAL_TIM_ConfigClockSource+0x168>
 8001cd8:	2b70      	cmp	r3, #112	; 0x70
 8001cda:	d01a      	beq.n	8001d12 <HAL_TIM_ConfigClockSource+0xa2>
 8001cdc:	2b70      	cmp	r3, #112	; 0x70
 8001cde:	d87b      	bhi.n	8001dd8 <HAL_TIM_ConfigClockSource+0x168>
 8001ce0:	2b60      	cmp	r3, #96	; 0x60
 8001ce2:	d050      	beq.n	8001d86 <HAL_TIM_ConfigClockSource+0x116>
 8001ce4:	2b60      	cmp	r3, #96	; 0x60
 8001ce6:	d877      	bhi.n	8001dd8 <HAL_TIM_ConfigClockSource+0x168>
 8001ce8:	2b50      	cmp	r3, #80	; 0x50
 8001cea:	d03c      	beq.n	8001d66 <HAL_TIM_ConfigClockSource+0xf6>
 8001cec:	2b50      	cmp	r3, #80	; 0x50
 8001cee:	d873      	bhi.n	8001dd8 <HAL_TIM_ConfigClockSource+0x168>
 8001cf0:	2b40      	cmp	r3, #64	; 0x40
 8001cf2:	d058      	beq.n	8001da6 <HAL_TIM_ConfigClockSource+0x136>
 8001cf4:	2b40      	cmp	r3, #64	; 0x40
 8001cf6:	d86f      	bhi.n	8001dd8 <HAL_TIM_ConfigClockSource+0x168>
 8001cf8:	2b30      	cmp	r3, #48	; 0x30
 8001cfa:	d064      	beq.n	8001dc6 <HAL_TIM_ConfigClockSource+0x156>
 8001cfc:	2b30      	cmp	r3, #48	; 0x30
 8001cfe:	d86b      	bhi.n	8001dd8 <HAL_TIM_ConfigClockSource+0x168>
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d060      	beq.n	8001dc6 <HAL_TIM_ConfigClockSource+0x156>
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	d867      	bhi.n	8001dd8 <HAL_TIM_ConfigClockSource+0x168>
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d05c      	beq.n	8001dc6 <HAL_TIM_ConfigClockSource+0x156>
 8001d0c:	2b10      	cmp	r3, #16
 8001d0e:	d05a      	beq.n	8001dc6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001d10:	e062      	b.n	8001dd8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6899      	ldr	r1, [r3, #8]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f000 f95c 	bl	8001fde <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d34:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	609a      	str	r2, [r3, #8]
      break;
 8001d3e:	e04e      	b.n	8001dde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	6899      	ldr	r1, [r3, #8]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f000 f945 	bl	8001fde <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d62:	609a      	str	r2, [r3, #8]
      break;
 8001d64:	e03b      	b.n	8001dde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	6859      	ldr	r1, [r3, #4]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	461a      	mov	r2, r3
 8001d74:	f000 f8bc 	bl	8001ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2150      	movs	r1, #80	; 0x50
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f913 	bl	8001faa <TIM_ITRx_SetConfig>
      break;
 8001d84:	e02b      	b.n	8001dde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6859      	ldr	r1, [r3, #4]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	461a      	mov	r2, r3
 8001d94:	f000 f8da 	bl	8001f4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2160      	movs	r1, #96	; 0x60
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f903 	bl	8001faa <TIM_ITRx_SetConfig>
      break;
 8001da4:	e01b      	b.n	8001dde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6859      	ldr	r1, [r3, #4]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	461a      	mov	r2, r3
 8001db4:	f000 f89c 	bl	8001ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2140      	movs	r1, #64	; 0x40
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f8f3 	bl	8001faa <TIM_ITRx_SetConfig>
      break;
 8001dc4:	e00b      	b.n	8001dde <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	f000 f8ea 	bl	8001faa <TIM_ITRx_SetConfig>
        break;
 8001dd6:	e002      	b.n	8001dde <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001dd8:	bf00      	nop
 8001dda:	e000      	b.n	8001dde <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001ddc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr

08001e2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a25      	ldr	r2, [pc, #148]	; (8001ee8 <TIM_Base_SetConfig+0xa8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d007      	beq.n	8001e68 <TIM_Base_SetConfig+0x28>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5e:	d003      	beq.n	8001e68 <TIM_Base_SetConfig+0x28>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a22      	ldr	r2, [pc, #136]	; (8001eec <TIM_Base_SetConfig+0xac>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d108      	bne.n	8001e7a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ee8 <TIM_Base_SetConfig+0xa8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <TIM_Base_SetConfig+0x52>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e88:	d003      	beq.n	8001e92 <TIM_Base_SetConfig+0x52>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a17      	ldr	r2, [pc, #92]	; (8001eec <TIM_Base_SetConfig+0xac>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d108      	bne.n	8001ea4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a07      	ldr	r2, [pc, #28]	; (8001ee8 <TIM_Base_SetConfig+0xa8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d103      	bne.n	8001ed8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	615a      	str	r2, [r3, #20]
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	40012c00 	.word	0x40012c00
 8001eec:	40000400 	.word	0x40000400

08001ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	f023 0201 	bic.w	r2, r3, #1
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f023 030a 	bic.w	r3, r3, #10
 8001f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	621a      	str	r2, [r3, #32]
}
 8001f42:	bf00      	nop
 8001f44:	371c      	adds	r7, #28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f023 0210 	bic.w	r2, r3, #16
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	031b      	lsls	r3, r3, #12
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	621a      	str	r2, [r3, #32]
}
 8001fa0:	bf00      	nop
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b085      	sub	sp, #20
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f043 0307 	orr.w	r3, r3, #7
 8001fcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	609a      	str	r2, [r3, #8]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b087      	sub	sp, #28
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ff8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	021a      	lsls	r2, r3, #8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	431a      	orrs	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	4313      	orrs	r3, r2
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	609a      	str	r2, [r3, #8]
}
 8002012:	bf00      	nop
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002030:	2302      	movs	r3, #2
 8002032:	e041      	b.n	80020b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d009      	beq.n	800208c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002080:	d004      	beq.n	800208c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a10      	ldr	r2, [pc, #64]	; (80020c8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d10c      	bne.n	80020a6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002092:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	4313      	orrs	r3, r2
 800209c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40012c00 	.word	0x40012c00
 80020c8:	40000400 	.word	0x40000400

080020cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <__errno>:
 80020f0:	4b01      	ldr	r3, [pc, #4]	; (80020f8 <__errno+0x8>)
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000024 	.word	0x20000024

080020fc <__libc_init_array>:
 80020fc:	b570      	push	{r4, r5, r6, lr}
 80020fe:	2600      	movs	r6, #0
 8002100:	4d0c      	ldr	r5, [pc, #48]	; (8002134 <__libc_init_array+0x38>)
 8002102:	4c0d      	ldr	r4, [pc, #52]	; (8002138 <__libc_init_array+0x3c>)
 8002104:	1b64      	subs	r4, r4, r5
 8002106:	10a4      	asrs	r4, r4, #2
 8002108:	42a6      	cmp	r6, r4
 800210a:	d109      	bne.n	8002120 <__libc_init_array+0x24>
 800210c:	f001 f82e 	bl	800316c <_init>
 8002110:	2600      	movs	r6, #0
 8002112:	4d0a      	ldr	r5, [pc, #40]	; (800213c <__libc_init_array+0x40>)
 8002114:	4c0a      	ldr	r4, [pc, #40]	; (8002140 <__libc_init_array+0x44>)
 8002116:	1b64      	subs	r4, r4, r5
 8002118:	10a4      	asrs	r4, r4, #2
 800211a:	42a6      	cmp	r6, r4
 800211c:	d105      	bne.n	800212a <__libc_init_array+0x2e>
 800211e:	bd70      	pop	{r4, r5, r6, pc}
 8002120:	f855 3b04 	ldr.w	r3, [r5], #4
 8002124:	4798      	blx	r3
 8002126:	3601      	adds	r6, #1
 8002128:	e7ee      	b.n	8002108 <__libc_init_array+0xc>
 800212a:	f855 3b04 	ldr.w	r3, [r5], #4
 800212e:	4798      	blx	r3
 8002130:	3601      	adds	r6, #1
 8002132:	e7f2      	b.n	800211a <__libc_init_array+0x1e>
 8002134:	080032f0 	.word	0x080032f0
 8002138:	080032f0 	.word	0x080032f0
 800213c:	080032f0 	.word	0x080032f0
 8002140:	080032f4 	.word	0x080032f4

08002144 <memset>:
 8002144:	4603      	mov	r3, r0
 8002146:	4402      	add	r2, r0
 8002148:	4293      	cmp	r3, r2
 800214a:	d100      	bne.n	800214e <memset+0xa>
 800214c:	4770      	bx	lr
 800214e:	f803 1b01 	strb.w	r1, [r3], #1
 8002152:	e7f9      	b.n	8002148 <memset+0x4>

08002154 <rand>:
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <rand+0x60>)
 8002156:	b510      	push	{r4, lr}
 8002158:	681c      	ldr	r4, [r3, #0]
 800215a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800215c:	b9b3      	cbnz	r3, 800218c <rand+0x38>
 800215e:	2018      	movs	r0, #24
 8002160:	f000 f868 	bl	8002234 <malloc>
 8002164:	4602      	mov	r2, r0
 8002166:	63a0      	str	r0, [r4, #56]	; 0x38
 8002168:	b920      	cbnz	r0, 8002174 <rand+0x20>
 800216a:	214e      	movs	r1, #78	; 0x4e
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <rand+0x64>)
 800216e:	4813      	ldr	r0, [pc, #76]	; (80021bc <rand+0x68>)
 8002170:	f000 f830 	bl	80021d4 <__assert_func>
 8002174:	4912      	ldr	r1, [pc, #72]	; (80021c0 <rand+0x6c>)
 8002176:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <rand+0x70>)
 8002178:	e9c0 1300 	strd	r1, r3, [r0]
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <rand+0x74>)
 800217e:	2100      	movs	r1, #0
 8002180:	6083      	str	r3, [r0, #8]
 8002182:	230b      	movs	r3, #11
 8002184:	8183      	strh	r3, [r0, #12]
 8002186:	2001      	movs	r0, #1
 8002188:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800218c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800218e:	480f      	ldr	r0, [pc, #60]	; (80021cc <rand+0x78>)
 8002190:	690a      	ldr	r2, [r1, #16]
 8002192:	694b      	ldr	r3, [r1, #20]
 8002194:	4350      	muls	r0, r2
 8002196:	4c0e      	ldr	r4, [pc, #56]	; (80021d0 <rand+0x7c>)
 8002198:	fb04 0003 	mla	r0, r4, r3, r0
 800219c:	fba2 3404 	umull	r3, r4, r2, r4
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	4404      	add	r4, r0
 80021a4:	f144 0000 	adc.w	r0, r4, #0
 80021a8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80021ac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80021b0:	bd10      	pop	{r4, pc}
 80021b2:	bf00      	nop
 80021b4:	20000024 	.word	0x20000024
 80021b8:	080031a8 	.word	0x080031a8
 80021bc:	080031bf 	.word	0x080031bf
 80021c0:	abcd330e 	.word	0xabcd330e
 80021c4:	e66d1234 	.word	0xe66d1234
 80021c8:	0005deec 	.word	0x0005deec
 80021cc:	5851f42d 	.word	0x5851f42d
 80021d0:	4c957f2d 	.word	0x4c957f2d

080021d4 <__assert_func>:
 80021d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80021d6:	4614      	mov	r4, r2
 80021d8:	461a      	mov	r2, r3
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <__assert_func+0x2c>)
 80021dc:	4605      	mov	r5, r0
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68d8      	ldr	r0, [r3, #12]
 80021e2:	b14c      	cbz	r4, 80021f8 <__assert_func+0x24>
 80021e4:	4b07      	ldr	r3, [pc, #28]	; (8002204 <__assert_func+0x30>)
 80021e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80021ea:	9100      	str	r1, [sp, #0]
 80021ec:	462b      	mov	r3, r5
 80021ee:	4906      	ldr	r1, [pc, #24]	; (8002208 <__assert_func+0x34>)
 80021f0:	f000 f80e 	bl	8002210 <fiprintf>
 80021f4:	f000 fc8a 	bl	8002b0c <abort>
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <__assert_func+0x38>)
 80021fa:	461c      	mov	r4, r3
 80021fc:	e7f3      	b.n	80021e6 <__assert_func+0x12>
 80021fe:	bf00      	nop
 8002200:	20000024 	.word	0x20000024
 8002204:	0800321e 	.word	0x0800321e
 8002208:	0800322b 	.word	0x0800322b
 800220c:	08003259 	.word	0x08003259

08002210 <fiprintf>:
 8002210:	b40e      	push	{r1, r2, r3}
 8002212:	b503      	push	{r0, r1, lr}
 8002214:	4601      	mov	r1, r0
 8002216:	ab03      	add	r3, sp, #12
 8002218:	4805      	ldr	r0, [pc, #20]	; (8002230 <fiprintf+0x20>)
 800221a:	f853 2b04 	ldr.w	r2, [r3], #4
 800221e:	6800      	ldr	r0, [r0, #0]
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	f000 f8dd 	bl	80023e0 <_vfiprintf_r>
 8002226:	b002      	add	sp, #8
 8002228:	f85d eb04 	ldr.w	lr, [sp], #4
 800222c:	b003      	add	sp, #12
 800222e:	4770      	bx	lr
 8002230:	20000024 	.word	0x20000024

08002234 <malloc>:
 8002234:	4b02      	ldr	r3, [pc, #8]	; (8002240 <malloc+0xc>)
 8002236:	4601      	mov	r1, r0
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	f000 b84f 	b.w	80022dc <_malloc_r>
 800223e:	bf00      	nop
 8002240:	20000024 	.word	0x20000024

08002244 <_free_r>:
 8002244:	b538      	push	{r3, r4, r5, lr}
 8002246:	4605      	mov	r5, r0
 8002248:	2900      	cmp	r1, #0
 800224a:	d043      	beq.n	80022d4 <_free_r+0x90>
 800224c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002250:	1f0c      	subs	r4, r1, #4
 8002252:	2b00      	cmp	r3, #0
 8002254:	bfb8      	it	lt
 8002256:	18e4      	addlt	r4, r4, r3
 8002258:	f000 fe8c 	bl	8002f74 <__malloc_lock>
 800225c:	4a1e      	ldr	r2, [pc, #120]	; (80022d8 <_free_r+0x94>)
 800225e:	6813      	ldr	r3, [r2, #0]
 8002260:	4610      	mov	r0, r2
 8002262:	b933      	cbnz	r3, 8002272 <_free_r+0x2e>
 8002264:	6063      	str	r3, [r4, #4]
 8002266:	6014      	str	r4, [r2, #0]
 8002268:	4628      	mov	r0, r5
 800226a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800226e:	f000 be87 	b.w	8002f80 <__malloc_unlock>
 8002272:	42a3      	cmp	r3, r4
 8002274:	d90a      	bls.n	800228c <_free_r+0x48>
 8002276:	6821      	ldr	r1, [r4, #0]
 8002278:	1862      	adds	r2, r4, r1
 800227a:	4293      	cmp	r3, r2
 800227c:	bf01      	itttt	eq
 800227e:	681a      	ldreq	r2, [r3, #0]
 8002280:	685b      	ldreq	r3, [r3, #4]
 8002282:	1852      	addeq	r2, r2, r1
 8002284:	6022      	streq	r2, [r4, #0]
 8002286:	6063      	str	r3, [r4, #4]
 8002288:	6004      	str	r4, [r0, #0]
 800228a:	e7ed      	b.n	8002268 <_free_r+0x24>
 800228c:	461a      	mov	r2, r3
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	b10b      	cbz	r3, 8002296 <_free_r+0x52>
 8002292:	42a3      	cmp	r3, r4
 8002294:	d9fa      	bls.n	800228c <_free_r+0x48>
 8002296:	6811      	ldr	r1, [r2, #0]
 8002298:	1850      	adds	r0, r2, r1
 800229a:	42a0      	cmp	r0, r4
 800229c:	d10b      	bne.n	80022b6 <_free_r+0x72>
 800229e:	6820      	ldr	r0, [r4, #0]
 80022a0:	4401      	add	r1, r0
 80022a2:	1850      	adds	r0, r2, r1
 80022a4:	4283      	cmp	r3, r0
 80022a6:	6011      	str	r1, [r2, #0]
 80022a8:	d1de      	bne.n	8002268 <_free_r+0x24>
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4401      	add	r1, r0
 80022b0:	6011      	str	r1, [r2, #0]
 80022b2:	6053      	str	r3, [r2, #4]
 80022b4:	e7d8      	b.n	8002268 <_free_r+0x24>
 80022b6:	d902      	bls.n	80022be <_free_r+0x7a>
 80022b8:	230c      	movs	r3, #12
 80022ba:	602b      	str	r3, [r5, #0]
 80022bc:	e7d4      	b.n	8002268 <_free_r+0x24>
 80022be:	6820      	ldr	r0, [r4, #0]
 80022c0:	1821      	adds	r1, r4, r0
 80022c2:	428b      	cmp	r3, r1
 80022c4:	bf01      	itttt	eq
 80022c6:	6819      	ldreq	r1, [r3, #0]
 80022c8:	685b      	ldreq	r3, [r3, #4]
 80022ca:	1809      	addeq	r1, r1, r0
 80022cc:	6021      	streq	r1, [r4, #0]
 80022ce:	6063      	str	r3, [r4, #4]
 80022d0:	6054      	str	r4, [r2, #4]
 80022d2:	e7c9      	b.n	8002268 <_free_r+0x24>
 80022d4:	bd38      	pop	{r3, r4, r5, pc}
 80022d6:	bf00      	nop
 80022d8:	200000c4 	.word	0x200000c4

080022dc <_malloc_r>:
 80022dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022de:	1ccd      	adds	r5, r1, #3
 80022e0:	f025 0503 	bic.w	r5, r5, #3
 80022e4:	3508      	adds	r5, #8
 80022e6:	2d0c      	cmp	r5, #12
 80022e8:	bf38      	it	cc
 80022ea:	250c      	movcc	r5, #12
 80022ec:	2d00      	cmp	r5, #0
 80022ee:	4606      	mov	r6, r0
 80022f0:	db01      	blt.n	80022f6 <_malloc_r+0x1a>
 80022f2:	42a9      	cmp	r1, r5
 80022f4:	d903      	bls.n	80022fe <_malloc_r+0x22>
 80022f6:	230c      	movs	r3, #12
 80022f8:	6033      	str	r3, [r6, #0]
 80022fa:	2000      	movs	r0, #0
 80022fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022fe:	f000 fe39 	bl	8002f74 <__malloc_lock>
 8002302:	4921      	ldr	r1, [pc, #132]	; (8002388 <_malloc_r+0xac>)
 8002304:	680a      	ldr	r2, [r1, #0]
 8002306:	4614      	mov	r4, r2
 8002308:	b99c      	cbnz	r4, 8002332 <_malloc_r+0x56>
 800230a:	4f20      	ldr	r7, [pc, #128]	; (800238c <_malloc_r+0xb0>)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	b923      	cbnz	r3, 800231a <_malloc_r+0x3e>
 8002310:	4621      	mov	r1, r4
 8002312:	4630      	mov	r0, r6
 8002314:	f000 fb2a 	bl	800296c <_sbrk_r>
 8002318:	6038      	str	r0, [r7, #0]
 800231a:	4629      	mov	r1, r5
 800231c:	4630      	mov	r0, r6
 800231e:	f000 fb25 	bl	800296c <_sbrk_r>
 8002322:	1c43      	adds	r3, r0, #1
 8002324:	d123      	bne.n	800236e <_malloc_r+0x92>
 8002326:	230c      	movs	r3, #12
 8002328:	4630      	mov	r0, r6
 800232a:	6033      	str	r3, [r6, #0]
 800232c:	f000 fe28 	bl	8002f80 <__malloc_unlock>
 8002330:	e7e3      	b.n	80022fa <_malloc_r+0x1e>
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	1b5b      	subs	r3, r3, r5
 8002336:	d417      	bmi.n	8002368 <_malloc_r+0x8c>
 8002338:	2b0b      	cmp	r3, #11
 800233a:	d903      	bls.n	8002344 <_malloc_r+0x68>
 800233c:	6023      	str	r3, [r4, #0]
 800233e:	441c      	add	r4, r3
 8002340:	6025      	str	r5, [r4, #0]
 8002342:	e004      	b.n	800234e <_malloc_r+0x72>
 8002344:	6863      	ldr	r3, [r4, #4]
 8002346:	42a2      	cmp	r2, r4
 8002348:	bf0c      	ite	eq
 800234a:	600b      	streq	r3, [r1, #0]
 800234c:	6053      	strne	r3, [r2, #4]
 800234e:	4630      	mov	r0, r6
 8002350:	f000 fe16 	bl	8002f80 <__malloc_unlock>
 8002354:	f104 000b 	add.w	r0, r4, #11
 8002358:	1d23      	adds	r3, r4, #4
 800235a:	f020 0007 	bic.w	r0, r0, #7
 800235e:	1ac2      	subs	r2, r0, r3
 8002360:	d0cc      	beq.n	80022fc <_malloc_r+0x20>
 8002362:	1a1b      	subs	r3, r3, r0
 8002364:	50a3      	str	r3, [r4, r2]
 8002366:	e7c9      	b.n	80022fc <_malloc_r+0x20>
 8002368:	4622      	mov	r2, r4
 800236a:	6864      	ldr	r4, [r4, #4]
 800236c:	e7cc      	b.n	8002308 <_malloc_r+0x2c>
 800236e:	1cc4      	adds	r4, r0, #3
 8002370:	f024 0403 	bic.w	r4, r4, #3
 8002374:	42a0      	cmp	r0, r4
 8002376:	d0e3      	beq.n	8002340 <_malloc_r+0x64>
 8002378:	1a21      	subs	r1, r4, r0
 800237a:	4630      	mov	r0, r6
 800237c:	f000 faf6 	bl	800296c <_sbrk_r>
 8002380:	3001      	adds	r0, #1
 8002382:	d1dd      	bne.n	8002340 <_malloc_r+0x64>
 8002384:	e7cf      	b.n	8002326 <_malloc_r+0x4a>
 8002386:	bf00      	nop
 8002388:	200000c4 	.word	0x200000c4
 800238c:	200000c8 	.word	0x200000c8

08002390 <__sfputc_r>:
 8002390:	6893      	ldr	r3, [r2, #8]
 8002392:	b410      	push	{r4}
 8002394:	3b01      	subs	r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	6093      	str	r3, [r2, #8]
 800239a:	da07      	bge.n	80023ac <__sfputc_r+0x1c>
 800239c:	6994      	ldr	r4, [r2, #24]
 800239e:	42a3      	cmp	r3, r4
 80023a0:	db01      	blt.n	80023a6 <__sfputc_r+0x16>
 80023a2:	290a      	cmp	r1, #10
 80023a4:	d102      	bne.n	80023ac <__sfputc_r+0x1c>
 80023a6:	bc10      	pop	{r4}
 80023a8:	f000 baf0 	b.w	800298c <__swbuf_r>
 80023ac:	6813      	ldr	r3, [r2, #0]
 80023ae:	1c58      	adds	r0, r3, #1
 80023b0:	6010      	str	r0, [r2, #0]
 80023b2:	7019      	strb	r1, [r3, #0]
 80023b4:	4608      	mov	r0, r1
 80023b6:	bc10      	pop	{r4}
 80023b8:	4770      	bx	lr

080023ba <__sfputs_r>:
 80023ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023bc:	4606      	mov	r6, r0
 80023be:	460f      	mov	r7, r1
 80023c0:	4614      	mov	r4, r2
 80023c2:	18d5      	adds	r5, r2, r3
 80023c4:	42ac      	cmp	r4, r5
 80023c6:	d101      	bne.n	80023cc <__sfputs_r+0x12>
 80023c8:	2000      	movs	r0, #0
 80023ca:	e007      	b.n	80023dc <__sfputs_r+0x22>
 80023cc:	463a      	mov	r2, r7
 80023ce:	4630      	mov	r0, r6
 80023d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023d4:	f7ff ffdc 	bl	8002390 <__sfputc_r>
 80023d8:	1c43      	adds	r3, r0, #1
 80023da:	d1f3      	bne.n	80023c4 <__sfputs_r+0xa>
 80023dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080023e0 <_vfiprintf_r>:
 80023e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023e4:	460d      	mov	r5, r1
 80023e6:	4614      	mov	r4, r2
 80023e8:	4698      	mov	r8, r3
 80023ea:	4606      	mov	r6, r0
 80023ec:	b09d      	sub	sp, #116	; 0x74
 80023ee:	b118      	cbz	r0, 80023f8 <_vfiprintf_r+0x18>
 80023f0:	6983      	ldr	r3, [r0, #24]
 80023f2:	b90b      	cbnz	r3, 80023f8 <_vfiprintf_r+0x18>
 80023f4:	f000 fcac 	bl	8002d50 <__sinit>
 80023f8:	4b89      	ldr	r3, [pc, #548]	; (8002620 <_vfiprintf_r+0x240>)
 80023fa:	429d      	cmp	r5, r3
 80023fc:	d11b      	bne.n	8002436 <_vfiprintf_r+0x56>
 80023fe:	6875      	ldr	r5, [r6, #4]
 8002400:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002402:	07d9      	lsls	r1, r3, #31
 8002404:	d405      	bmi.n	8002412 <_vfiprintf_r+0x32>
 8002406:	89ab      	ldrh	r3, [r5, #12]
 8002408:	059a      	lsls	r2, r3, #22
 800240a:	d402      	bmi.n	8002412 <_vfiprintf_r+0x32>
 800240c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800240e:	f000 fd3d 	bl	8002e8c <__retarget_lock_acquire_recursive>
 8002412:	89ab      	ldrh	r3, [r5, #12]
 8002414:	071b      	lsls	r3, r3, #28
 8002416:	d501      	bpl.n	800241c <_vfiprintf_r+0x3c>
 8002418:	692b      	ldr	r3, [r5, #16]
 800241a:	b9eb      	cbnz	r3, 8002458 <_vfiprintf_r+0x78>
 800241c:	4629      	mov	r1, r5
 800241e:	4630      	mov	r0, r6
 8002420:	f000 fb06 	bl	8002a30 <__swsetup_r>
 8002424:	b1c0      	cbz	r0, 8002458 <_vfiprintf_r+0x78>
 8002426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002428:	07dc      	lsls	r4, r3, #31
 800242a:	d50e      	bpl.n	800244a <_vfiprintf_r+0x6a>
 800242c:	f04f 30ff 	mov.w	r0, #4294967295
 8002430:	b01d      	add	sp, #116	; 0x74
 8002432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002436:	4b7b      	ldr	r3, [pc, #492]	; (8002624 <_vfiprintf_r+0x244>)
 8002438:	429d      	cmp	r5, r3
 800243a:	d101      	bne.n	8002440 <_vfiprintf_r+0x60>
 800243c:	68b5      	ldr	r5, [r6, #8]
 800243e:	e7df      	b.n	8002400 <_vfiprintf_r+0x20>
 8002440:	4b79      	ldr	r3, [pc, #484]	; (8002628 <_vfiprintf_r+0x248>)
 8002442:	429d      	cmp	r5, r3
 8002444:	bf08      	it	eq
 8002446:	68f5      	ldreq	r5, [r6, #12]
 8002448:	e7da      	b.n	8002400 <_vfiprintf_r+0x20>
 800244a:	89ab      	ldrh	r3, [r5, #12]
 800244c:	0598      	lsls	r0, r3, #22
 800244e:	d4ed      	bmi.n	800242c <_vfiprintf_r+0x4c>
 8002450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002452:	f000 fd1c 	bl	8002e8e <__retarget_lock_release_recursive>
 8002456:	e7e9      	b.n	800242c <_vfiprintf_r+0x4c>
 8002458:	2300      	movs	r3, #0
 800245a:	9309      	str	r3, [sp, #36]	; 0x24
 800245c:	2320      	movs	r3, #32
 800245e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002462:	2330      	movs	r3, #48	; 0x30
 8002464:	f04f 0901 	mov.w	r9, #1
 8002468:	f8cd 800c 	str.w	r8, [sp, #12]
 800246c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800262c <_vfiprintf_r+0x24c>
 8002470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002474:	4623      	mov	r3, r4
 8002476:	469a      	mov	sl, r3
 8002478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800247c:	b10a      	cbz	r2, 8002482 <_vfiprintf_r+0xa2>
 800247e:	2a25      	cmp	r2, #37	; 0x25
 8002480:	d1f9      	bne.n	8002476 <_vfiprintf_r+0x96>
 8002482:	ebba 0b04 	subs.w	fp, sl, r4
 8002486:	d00b      	beq.n	80024a0 <_vfiprintf_r+0xc0>
 8002488:	465b      	mov	r3, fp
 800248a:	4622      	mov	r2, r4
 800248c:	4629      	mov	r1, r5
 800248e:	4630      	mov	r0, r6
 8002490:	f7ff ff93 	bl	80023ba <__sfputs_r>
 8002494:	3001      	adds	r0, #1
 8002496:	f000 80aa 	beq.w	80025ee <_vfiprintf_r+0x20e>
 800249a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800249c:	445a      	add	r2, fp
 800249e:	9209      	str	r2, [sp, #36]	; 0x24
 80024a0:	f89a 3000 	ldrb.w	r3, [sl]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80a2 	beq.w	80025ee <_vfiprintf_r+0x20e>
 80024aa:	2300      	movs	r3, #0
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024b4:	f10a 0a01 	add.w	sl, sl, #1
 80024b8:	9304      	str	r3, [sp, #16]
 80024ba:	9307      	str	r3, [sp, #28]
 80024bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024c0:	931a      	str	r3, [sp, #104]	; 0x68
 80024c2:	4654      	mov	r4, sl
 80024c4:	2205      	movs	r2, #5
 80024c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024ca:	4858      	ldr	r0, [pc, #352]	; (800262c <_vfiprintf_r+0x24c>)
 80024cc:	f000 fd44 	bl	8002f58 <memchr>
 80024d0:	9a04      	ldr	r2, [sp, #16]
 80024d2:	b9d8      	cbnz	r0, 800250c <_vfiprintf_r+0x12c>
 80024d4:	06d1      	lsls	r1, r2, #27
 80024d6:	bf44      	itt	mi
 80024d8:	2320      	movmi	r3, #32
 80024da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024de:	0713      	lsls	r3, r2, #28
 80024e0:	bf44      	itt	mi
 80024e2:	232b      	movmi	r3, #43	; 0x2b
 80024e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024e8:	f89a 3000 	ldrb.w	r3, [sl]
 80024ec:	2b2a      	cmp	r3, #42	; 0x2a
 80024ee:	d015      	beq.n	800251c <_vfiprintf_r+0x13c>
 80024f0:	4654      	mov	r4, sl
 80024f2:	2000      	movs	r0, #0
 80024f4:	f04f 0c0a 	mov.w	ip, #10
 80024f8:	9a07      	ldr	r2, [sp, #28]
 80024fa:	4621      	mov	r1, r4
 80024fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002500:	3b30      	subs	r3, #48	; 0x30
 8002502:	2b09      	cmp	r3, #9
 8002504:	d94e      	bls.n	80025a4 <_vfiprintf_r+0x1c4>
 8002506:	b1b0      	cbz	r0, 8002536 <_vfiprintf_r+0x156>
 8002508:	9207      	str	r2, [sp, #28]
 800250a:	e014      	b.n	8002536 <_vfiprintf_r+0x156>
 800250c:	eba0 0308 	sub.w	r3, r0, r8
 8002510:	fa09 f303 	lsl.w	r3, r9, r3
 8002514:	4313      	orrs	r3, r2
 8002516:	46a2      	mov	sl, r4
 8002518:	9304      	str	r3, [sp, #16]
 800251a:	e7d2      	b.n	80024c2 <_vfiprintf_r+0xe2>
 800251c:	9b03      	ldr	r3, [sp, #12]
 800251e:	1d19      	adds	r1, r3, #4
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	9103      	str	r1, [sp, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	bfbb      	ittet	lt
 8002528:	425b      	neglt	r3, r3
 800252a:	f042 0202 	orrlt.w	r2, r2, #2
 800252e:	9307      	strge	r3, [sp, #28]
 8002530:	9307      	strlt	r3, [sp, #28]
 8002532:	bfb8      	it	lt
 8002534:	9204      	strlt	r2, [sp, #16]
 8002536:	7823      	ldrb	r3, [r4, #0]
 8002538:	2b2e      	cmp	r3, #46	; 0x2e
 800253a:	d10c      	bne.n	8002556 <_vfiprintf_r+0x176>
 800253c:	7863      	ldrb	r3, [r4, #1]
 800253e:	2b2a      	cmp	r3, #42	; 0x2a
 8002540:	d135      	bne.n	80025ae <_vfiprintf_r+0x1ce>
 8002542:	9b03      	ldr	r3, [sp, #12]
 8002544:	3402      	adds	r4, #2
 8002546:	1d1a      	adds	r2, r3, #4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	9203      	str	r2, [sp, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	bfb8      	it	lt
 8002550:	f04f 33ff 	movlt.w	r3, #4294967295
 8002554:	9305      	str	r3, [sp, #20]
 8002556:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800263c <_vfiprintf_r+0x25c>
 800255a:	2203      	movs	r2, #3
 800255c:	4650      	mov	r0, sl
 800255e:	7821      	ldrb	r1, [r4, #0]
 8002560:	f000 fcfa 	bl	8002f58 <memchr>
 8002564:	b140      	cbz	r0, 8002578 <_vfiprintf_r+0x198>
 8002566:	2340      	movs	r3, #64	; 0x40
 8002568:	eba0 000a 	sub.w	r0, r0, sl
 800256c:	fa03 f000 	lsl.w	r0, r3, r0
 8002570:	9b04      	ldr	r3, [sp, #16]
 8002572:	3401      	adds	r4, #1
 8002574:	4303      	orrs	r3, r0
 8002576:	9304      	str	r3, [sp, #16]
 8002578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800257c:	2206      	movs	r2, #6
 800257e:	482c      	ldr	r0, [pc, #176]	; (8002630 <_vfiprintf_r+0x250>)
 8002580:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002584:	f000 fce8 	bl	8002f58 <memchr>
 8002588:	2800      	cmp	r0, #0
 800258a:	d03f      	beq.n	800260c <_vfiprintf_r+0x22c>
 800258c:	4b29      	ldr	r3, [pc, #164]	; (8002634 <_vfiprintf_r+0x254>)
 800258e:	bb1b      	cbnz	r3, 80025d8 <_vfiprintf_r+0x1f8>
 8002590:	9b03      	ldr	r3, [sp, #12]
 8002592:	3307      	adds	r3, #7
 8002594:	f023 0307 	bic.w	r3, r3, #7
 8002598:	3308      	adds	r3, #8
 800259a:	9303      	str	r3, [sp, #12]
 800259c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800259e:	443b      	add	r3, r7
 80025a0:	9309      	str	r3, [sp, #36]	; 0x24
 80025a2:	e767      	b.n	8002474 <_vfiprintf_r+0x94>
 80025a4:	460c      	mov	r4, r1
 80025a6:	2001      	movs	r0, #1
 80025a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80025ac:	e7a5      	b.n	80024fa <_vfiprintf_r+0x11a>
 80025ae:	2300      	movs	r3, #0
 80025b0:	f04f 0c0a 	mov.w	ip, #10
 80025b4:	4619      	mov	r1, r3
 80025b6:	3401      	adds	r4, #1
 80025b8:	9305      	str	r3, [sp, #20]
 80025ba:	4620      	mov	r0, r4
 80025bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80025c0:	3a30      	subs	r2, #48	; 0x30
 80025c2:	2a09      	cmp	r2, #9
 80025c4:	d903      	bls.n	80025ce <_vfiprintf_r+0x1ee>
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0c5      	beq.n	8002556 <_vfiprintf_r+0x176>
 80025ca:	9105      	str	r1, [sp, #20]
 80025cc:	e7c3      	b.n	8002556 <_vfiprintf_r+0x176>
 80025ce:	4604      	mov	r4, r0
 80025d0:	2301      	movs	r3, #1
 80025d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80025d6:	e7f0      	b.n	80025ba <_vfiprintf_r+0x1da>
 80025d8:	ab03      	add	r3, sp, #12
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	462a      	mov	r2, r5
 80025de:	4630      	mov	r0, r6
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <_vfiprintf_r+0x258>)
 80025e2:	a904      	add	r1, sp, #16
 80025e4:	f3af 8000 	nop.w
 80025e8:	4607      	mov	r7, r0
 80025ea:	1c78      	adds	r0, r7, #1
 80025ec:	d1d6      	bne.n	800259c <_vfiprintf_r+0x1bc>
 80025ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025f0:	07d9      	lsls	r1, r3, #31
 80025f2:	d405      	bmi.n	8002600 <_vfiprintf_r+0x220>
 80025f4:	89ab      	ldrh	r3, [r5, #12]
 80025f6:	059a      	lsls	r2, r3, #22
 80025f8:	d402      	bmi.n	8002600 <_vfiprintf_r+0x220>
 80025fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025fc:	f000 fc47 	bl	8002e8e <__retarget_lock_release_recursive>
 8002600:	89ab      	ldrh	r3, [r5, #12]
 8002602:	065b      	lsls	r3, r3, #25
 8002604:	f53f af12 	bmi.w	800242c <_vfiprintf_r+0x4c>
 8002608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800260a:	e711      	b.n	8002430 <_vfiprintf_r+0x50>
 800260c:	ab03      	add	r3, sp, #12
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	462a      	mov	r2, r5
 8002612:	4630      	mov	r0, r6
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <_vfiprintf_r+0x258>)
 8002616:	a904      	add	r1, sp, #16
 8002618:	f000 f882 	bl	8002720 <_printf_i>
 800261c:	e7e4      	b.n	80025e8 <_vfiprintf_r+0x208>
 800261e:	bf00      	nop
 8002620:	080032b0 	.word	0x080032b0
 8002624:	080032d0 	.word	0x080032d0
 8002628:	08003290 	.word	0x08003290
 800262c:	0800325a 	.word	0x0800325a
 8002630:	08003264 	.word	0x08003264
 8002634:	00000000 	.word	0x00000000
 8002638:	080023bb 	.word	0x080023bb
 800263c:	08003260 	.word	0x08003260

08002640 <_printf_common>:
 8002640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002644:	4616      	mov	r6, r2
 8002646:	4699      	mov	r9, r3
 8002648:	688a      	ldr	r2, [r1, #8]
 800264a:	690b      	ldr	r3, [r1, #16]
 800264c:	4607      	mov	r7, r0
 800264e:	4293      	cmp	r3, r2
 8002650:	bfb8      	it	lt
 8002652:	4613      	movlt	r3, r2
 8002654:	6033      	str	r3, [r6, #0]
 8002656:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800265a:	460c      	mov	r4, r1
 800265c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002660:	b10a      	cbz	r2, 8002666 <_printf_common+0x26>
 8002662:	3301      	adds	r3, #1
 8002664:	6033      	str	r3, [r6, #0]
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	0699      	lsls	r1, r3, #26
 800266a:	bf42      	ittt	mi
 800266c:	6833      	ldrmi	r3, [r6, #0]
 800266e:	3302      	addmi	r3, #2
 8002670:	6033      	strmi	r3, [r6, #0]
 8002672:	6825      	ldr	r5, [r4, #0]
 8002674:	f015 0506 	ands.w	r5, r5, #6
 8002678:	d106      	bne.n	8002688 <_printf_common+0x48>
 800267a:	f104 0a19 	add.w	sl, r4, #25
 800267e:	68e3      	ldr	r3, [r4, #12]
 8002680:	6832      	ldr	r2, [r6, #0]
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	42ab      	cmp	r3, r5
 8002686:	dc28      	bgt.n	80026da <_printf_common+0x9a>
 8002688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800268c:	1e13      	subs	r3, r2, #0
 800268e:	6822      	ldr	r2, [r4, #0]
 8002690:	bf18      	it	ne
 8002692:	2301      	movne	r3, #1
 8002694:	0692      	lsls	r2, r2, #26
 8002696:	d42d      	bmi.n	80026f4 <_printf_common+0xb4>
 8002698:	4649      	mov	r1, r9
 800269a:	4638      	mov	r0, r7
 800269c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026a0:	47c0      	blx	r8
 80026a2:	3001      	adds	r0, #1
 80026a4:	d020      	beq.n	80026e8 <_printf_common+0xa8>
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	68e5      	ldr	r5, [r4, #12]
 80026aa:	f003 0306 	and.w	r3, r3, #6
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	bf18      	it	ne
 80026b2:	2500      	movne	r5, #0
 80026b4:	6832      	ldr	r2, [r6, #0]
 80026b6:	f04f 0600 	mov.w	r6, #0
 80026ba:	68a3      	ldr	r3, [r4, #8]
 80026bc:	bf08      	it	eq
 80026be:	1aad      	subeq	r5, r5, r2
 80026c0:	6922      	ldr	r2, [r4, #16]
 80026c2:	bf08      	it	eq
 80026c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026c8:	4293      	cmp	r3, r2
 80026ca:	bfc4      	itt	gt
 80026cc:	1a9b      	subgt	r3, r3, r2
 80026ce:	18ed      	addgt	r5, r5, r3
 80026d0:	341a      	adds	r4, #26
 80026d2:	42b5      	cmp	r5, r6
 80026d4:	d11a      	bne.n	800270c <_printf_common+0xcc>
 80026d6:	2000      	movs	r0, #0
 80026d8:	e008      	b.n	80026ec <_printf_common+0xac>
 80026da:	2301      	movs	r3, #1
 80026dc:	4652      	mov	r2, sl
 80026de:	4649      	mov	r1, r9
 80026e0:	4638      	mov	r0, r7
 80026e2:	47c0      	blx	r8
 80026e4:	3001      	adds	r0, #1
 80026e6:	d103      	bne.n	80026f0 <_printf_common+0xb0>
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026f0:	3501      	adds	r5, #1
 80026f2:	e7c4      	b.n	800267e <_printf_common+0x3e>
 80026f4:	2030      	movs	r0, #48	; 0x30
 80026f6:	18e1      	adds	r1, r4, r3
 80026f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002702:	4422      	add	r2, r4
 8002704:	3302      	adds	r3, #2
 8002706:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800270a:	e7c5      	b.n	8002698 <_printf_common+0x58>
 800270c:	2301      	movs	r3, #1
 800270e:	4622      	mov	r2, r4
 8002710:	4649      	mov	r1, r9
 8002712:	4638      	mov	r0, r7
 8002714:	47c0      	blx	r8
 8002716:	3001      	adds	r0, #1
 8002718:	d0e6      	beq.n	80026e8 <_printf_common+0xa8>
 800271a:	3601      	adds	r6, #1
 800271c:	e7d9      	b.n	80026d2 <_printf_common+0x92>
	...

08002720 <_printf_i>:
 8002720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002724:	460c      	mov	r4, r1
 8002726:	7e27      	ldrb	r7, [r4, #24]
 8002728:	4691      	mov	r9, r2
 800272a:	2f78      	cmp	r7, #120	; 0x78
 800272c:	4680      	mov	r8, r0
 800272e:	469a      	mov	sl, r3
 8002730:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002732:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002736:	d807      	bhi.n	8002748 <_printf_i+0x28>
 8002738:	2f62      	cmp	r7, #98	; 0x62
 800273a:	d80a      	bhi.n	8002752 <_printf_i+0x32>
 800273c:	2f00      	cmp	r7, #0
 800273e:	f000 80d9 	beq.w	80028f4 <_printf_i+0x1d4>
 8002742:	2f58      	cmp	r7, #88	; 0x58
 8002744:	f000 80a4 	beq.w	8002890 <_printf_i+0x170>
 8002748:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800274c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002750:	e03a      	b.n	80027c8 <_printf_i+0xa8>
 8002752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002756:	2b15      	cmp	r3, #21
 8002758:	d8f6      	bhi.n	8002748 <_printf_i+0x28>
 800275a:	a001      	add	r0, pc, #4	; (adr r0, 8002760 <_printf_i+0x40>)
 800275c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002760:	080027b9 	.word	0x080027b9
 8002764:	080027cd 	.word	0x080027cd
 8002768:	08002749 	.word	0x08002749
 800276c:	08002749 	.word	0x08002749
 8002770:	08002749 	.word	0x08002749
 8002774:	08002749 	.word	0x08002749
 8002778:	080027cd 	.word	0x080027cd
 800277c:	08002749 	.word	0x08002749
 8002780:	08002749 	.word	0x08002749
 8002784:	08002749 	.word	0x08002749
 8002788:	08002749 	.word	0x08002749
 800278c:	080028db 	.word	0x080028db
 8002790:	080027fd 	.word	0x080027fd
 8002794:	080028bd 	.word	0x080028bd
 8002798:	08002749 	.word	0x08002749
 800279c:	08002749 	.word	0x08002749
 80027a0:	080028fd 	.word	0x080028fd
 80027a4:	08002749 	.word	0x08002749
 80027a8:	080027fd 	.word	0x080027fd
 80027ac:	08002749 	.word	0x08002749
 80027b0:	08002749 	.word	0x08002749
 80027b4:	080028c5 	.word	0x080028c5
 80027b8:	680b      	ldr	r3, [r1, #0]
 80027ba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80027be:	1d1a      	adds	r2, r3, #4
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	600a      	str	r2, [r1, #0]
 80027c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0a4      	b.n	8002916 <_printf_i+0x1f6>
 80027cc:	6825      	ldr	r5, [r4, #0]
 80027ce:	6808      	ldr	r0, [r1, #0]
 80027d0:	062e      	lsls	r6, r5, #24
 80027d2:	f100 0304 	add.w	r3, r0, #4
 80027d6:	d50a      	bpl.n	80027ee <_printf_i+0xce>
 80027d8:	6805      	ldr	r5, [r0, #0]
 80027da:	600b      	str	r3, [r1, #0]
 80027dc:	2d00      	cmp	r5, #0
 80027de:	da03      	bge.n	80027e8 <_printf_i+0xc8>
 80027e0:	232d      	movs	r3, #45	; 0x2d
 80027e2:	426d      	negs	r5, r5
 80027e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027e8:	230a      	movs	r3, #10
 80027ea:	485e      	ldr	r0, [pc, #376]	; (8002964 <_printf_i+0x244>)
 80027ec:	e019      	b.n	8002822 <_printf_i+0x102>
 80027ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80027f2:	6805      	ldr	r5, [r0, #0]
 80027f4:	600b      	str	r3, [r1, #0]
 80027f6:	bf18      	it	ne
 80027f8:	b22d      	sxthne	r5, r5
 80027fa:	e7ef      	b.n	80027dc <_printf_i+0xbc>
 80027fc:	680b      	ldr	r3, [r1, #0]
 80027fe:	6825      	ldr	r5, [r4, #0]
 8002800:	1d18      	adds	r0, r3, #4
 8002802:	6008      	str	r0, [r1, #0]
 8002804:	0628      	lsls	r0, r5, #24
 8002806:	d501      	bpl.n	800280c <_printf_i+0xec>
 8002808:	681d      	ldr	r5, [r3, #0]
 800280a:	e002      	b.n	8002812 <_printf_i+0xf2>
 800280c:	0669      	lsls	r1, r5, #25
 800280e:	d5fb      	bpl.n	8002808 <_printf_i+0xe8>
 8002810:	881d      	ldrh	r5, [r3, #0]
 8002812:	2f6f      	cmp	r7, #111	; 0x6f
 8002814:	bf0c      	ite	eq
 8002816:	2308      	moveq	r3, #8
 8002818:	230a      	movne	r3, #10
 800281a:	4852      	ldr	r0, [pc, #328]	; (8002964 <_printf_i+0x244>)
 800281c:	2100      	movs	r1, #0
 800281e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002822:	6866      	ldr	r6, [r4, #4]
 8002824:	2e00      	cmp	r6, #0
 8002826:	bfa8      	it	ge
 8002828:	6821      	ldrge	r1, [r4, #0]
 800282a:	60a6      	str	r6, [r4, #8]
 800282c:	bfa4      	itt	ge
 800282e:	f021 0104 	bicge.w	r1, r1, #4
 8002832:	6021      	strge	r1, [r4, #0]
 8002834:	b90d      	cbnz	r5, 800283a <_printf_i+0x11a>
 8002836:	2e00      	cmp	r6, #0
 8002838:	d04d      	beq.n	80028d6 <_printf_i+0x1b6>
 800283a:	4616      	mov	r6, r2
 800283c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002840:	fb03 5711 	mls	r7, r3, r1, r5
 8002844:	5dc7      	ldrb	r7, [r0, r7]
 8002846:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800284a:	462f      	mov	r7, r5
 800284c:	42bb      	cmp	r3, r7
 800284e:	460d      	mov	r5, r1
 8002850:	d9f4      	bls.n	800283c <_printf_i+0x11c>
 8002852:	2b08      	cmp	r3, #8
 8002854:	d10b      	bne.n	800286e <_printf_i+0x14e>
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	07df      	lsls	r7, r3, #31
 800285a:	d508      	bpl.n	800286e <_printf_i+0x14e>
 800285c:	6923      	ldr	r3, [r4, #16]
 800285e:	6861      	ldr	r1, [r4, #4]
 8002860:	4299      	cmp	r1, r3
 8002862:	bfde      	ittt	le
 8002864:	2330      	movle	r3, #48	; 0x30
 8002866:	f806 3c01 	strble.w	r3, [r6, #-1]
 800286a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800286e:	1b92      	subs	r2, r2, r6
 8002870:	6122      	str	r2, [r4, #16]
 8002872:	464b      	mov	r3, r9
 8002874:	4621      	mov	r1, r4
 8002876:	4640      	mov	r0, r8
 8002878:	f8cd a000 	str.w	sl, [sp]
 800287c:	aa03      	add	r2, sp, #12
 800287e:	f7ff fedf 	bl	8002640 <_printf_common>
 8002882:	3001      	adds	r0, #1
 8002884:	d14c      	bne.n	8002920 <_printf_i+0x200>
 8002886:	f04f 30ff 	mov.w	r0, #4294967295
 800288a:	b004      	add	sp, #16
 800288c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002890:	4834      	ldr	r0, [pc, #208]	; (8002964 <_printf_i+0x244>)
 8002892:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002896:	680e      	ldr	r6, [r1, #0]
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	f856 5b04 	ldr.w	r5, [r6], #4
 800289e:	061f      	lsls	r7, r3, #24
 80028a0:	600e      	str	r6, [r1, #0]
 80028a2:	d514      	bpl.n	80028ce <_printf_i+0x1ae>
 80028a4:	07d9      	lsls	r1, r3, #31
 80028a6:	bf44      	itt	mi
 80028a8:	f043 0320 	orrmi.w	r3, r3, #32
 80028ac:	6023      	strmi	r3, [r4, #0]
 80028ae:	b91d      	cbnz	r5, 80028b8 <_printf_i+0x198>
 80028b0:	6823      	ldr	r3, [r4, #0]
 80028b2:	f023 0320 	bic.w	r3, r3, #32
 80028b6:	6023      	str	r3, [r4, #0]
 80028b8:	2310      	movs	r3, #16
 80028ba:	e7af      	b.n	800281c <_printf_i+0xfc>
 80028bc:	6823      	ldr	r3, [r4, #0]
 80028be:	f043 0320 	orr.w	r3, r3, #32
 80028c2:	6023      	str	r3, [r4, #0]
 80028c4:	2378      	movs	r3, #120	; 0x78
 80028c6:	4828      	ldr	r0, [pc, #160]	; (8002968 <_printf_i+0x248>)
 80028c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80028cc:	e7e3      	b.n	8002896 <_printf_i+0x176>
 80028ce:	065e      	lsls	r6, r3, #25
 80028d0:	bf48      	it	mi
 80028d2:	b2ad      	uxthmi	r5, r5
 80028d4:	e7e6      	b.n	80028a4 <_printf_i+0x184>
 80028d6:	4616      	mov	r6, r2
 80028d8:	e7bb      	b.n	8002852 <_printf_i+0x132>
 80028da:	680b      	ldr	r3, [r1, #0]
 80028dc:	6826      	ldr	r6, [r4, #0]
 80028de:	1d1d      	adds	r5, r3, #4
 80028e0:	6960      	ldr	r0, [r4, #20]
 80028e2:	600d      	str	r5, [r1, #0]
 80028e4:	0635      	lsls	r5, r6, #24
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	d501      	bpl.n	80028ee <_printf_i+0x1ce>
 80028ea:	6018      	str	r0, [r3, #0]
 80028ec:	e002      	b.n	80028f4 <_printf_i+0x1d4>
 80028ee:	0671      	lsls	r1, r6, #25
 80028f0:	d5fb      	bpl.n	80028ea <_printf_i+0x1ca>
 80028f2:	8018      	strh	r0, [r3, #0]
 80028f4:	2300      	movs	r3, #0
 80028f6:	4616      	mov	r6, r2
 80028f8:	6123      	str	r3, [r4, #16]
 80028fa:	e7ba      	b.n	8002872 <_printf_i+0x152>
 80028fc:	680b      	ldr	r3, [r1, #0]
 80028fe:	1d1a      	adds	r2, r3, #4
 8002900:	600a      	str	r2, [r1, #0]
 8002902:	681e      	ldr	r6, [r3, #0]
 8002904:	2100      	movs	r1, #0
 8002906:	4630      	mov	r0, r6
 8002908:	6862      	ldr	r2, [r4, #4]
 800290a:	f000 fb25 	bl	8002f58 <memchr>
 800290e:	b108      	cbz	r0, 8002914 <_printf_i+0x1f4>
 8002910:	1b80      	subs	r0, r0, r6
 8002912:	6060      	str	r0, [r4, #4]
 8002914:	6863      	ldr	r3, [r4, #4]
 8002916:	6123      	str	r3, [r4, #16]
 8002918:	2300      	movs	r3, #0
 800291a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800291e:	e7a8      	b.n	8002872 <_printf_i+0x152>
 8002920:	4632      	mov	r2, r6
 8002922:	4649      	mov	r1, r9
 8002924:	4640      	mov	r0, r8
 8002926:	6923      	ldr	r3, [r4, #16]
 8002928:	47d0      	blx	sl
 800292a:	3001      	adds	r0, #1
 800292c:	d0ab      	beq.n	8002886 <_printf_i+0x166>
 800292e:	6823      	ldr	r3, [r4, #0]
 8002930:	079b      	lsls	r3, r3, #30
 8002932:	d413      	bmi.n	800295c <_printf_i+0x23c>
 8002934:	68e0      	ldr	r0, [r4, #12]
 8002936:	9b03      	ldr	r3, [sp, #12]
 8002938:	4298      	cmp	r0, r3
 800293a:	bfb8      	it	lt
 800293c:	4618      	movlt	r0, r3
 800293e:	e7a4      	b.n	800288a <_printf_i+0x16a>
 8002940:	2301      	movs	r3, #1
 8002942:	4632      	mov	r2, r6
 8002944:	4649      	mov	r1, r9
 8002946:	4640      	mov	r0, r8
 8002948:	47d0      	blx	sl
 800294a:	3001      	adds	r0, #1
 800294c:	d09b      	beq.n	8002886 <_printf_i+0x166>
 800294e:	3501      	adds	r5, #1
 8002950:	68e3      	ldr	r3, [r4, #12]
 8002952:	9903      	ldr	r1, [sp, #12]
 8002954:	1a5b      	subs	r3, r3, r1
 8002956:	42ab      	cmp	r3, r5
 8002958:	dcf2      	bgt.n	8002940 <_printf_i+0x220>
 800295a:	e7eb      	b.n	8002934 <_printf_i+0x214>
 800295c:	2500      	movs	r5, #0
 800295e:	f104 0619 	add.w	r6, r4, #25
 8002962:	e7f5      	b.n	8002950 <_printf_i+0x230>
 8002964:	0800326b 	.word	0x0800326b
 8002968:	0800327c 	.word	0x0800327c

0800296c <_sbrk_r>:
 800296c:	b538      	push	{r3, r4, r5, lr}
 800296e:	2300      	movs	r3, #0
 8002970:	4d05      	ldr	r5, [pc, #20]	; (8002988 <_sbrk_r+0x1c>)
 8002972:	4604      	mov	r4, r0
 8002974:	4608      	mov	r0, r1
 8002976:	602b      	str	r3, [r5, #0]
 8002978:	f7fd fff4 	bl	8000964 <_sbrk>
 800297c:	1c43      	adds	r3, r0, #1
 800297e:	d102      	bne.n	8002986 <_sbrk_r+0x1a>
 8002980:	682b      	ldr	r3, [r5, #0]
 8002982:	b103      	cbz	r3, 8002986 <_sbrk_r+0x1a>
 8002984:	6023      	str	r3, [r4, #0]
 8002986:	bd38      	pop	{r3, r4, r5, pc}
 8002988:	20000124 	.word	0x20000124

0800298c <__swbuf_r>:
 800298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298e:	460e      	mov	r6, r1
 8002990:	4614      	mov	r4, r2
 8002992:	4605      	mov	r5, r0
 8002994:	b118      	cbz	r0, 800299e <__swbuf_r+0x12>
 8002996:	6983      	ldr	r3, [r0, #24]
 8002998:	b90b      	cbnz	r3, 800299e <__swbuf_r+0x12>
 800299a:	f000 f9d9 	bl	8002d50 <__sinit>
 800299e:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <__swbuf_r+0x98>)
 80029a0:	429c      	cmp	r4, r3
 80029a2:	d12b      	bne.n	80029fc <__swbuf_r+0x70>
 80029a4:	686c      	ldr	r4, [r5, #4]
 80029a6:	69a3      	ldr	r3, [r4, #24]
 80029a8:	60a3      	str	r3, [r4, #8]
 80029aa:	89a3      	ldrh	r3, [r4, #12]
 80029ac:	071a      	lsls	r2, r3, #28
 80029ae:	d52f      	bpl.n	8002a10 <__swbuf_r+0x84>
 80029b0:	6923      	ldr	r3, [r4, #16]
 80029b2:	b36b      	cbz	r3, 8002a10 <__swbuf_r+0x84>
 80029b4:	6923      	ldr	r3, [r4, #16]
 80029b6:	6820      	ldr	r0, [r4, #0]
 80029b8:	b2f6      	uxtb	r6, r6
 80029ba:	1ac0      	subs	r0, r0, r3
 80029bc:	6963      	ldr	r3, [r4, #20]
 80029be:	4637      	mov	r7, r6
 80029c0:	4283      	cmp	r3, r0
 80029c2:	dc04      	bgt.n	80029ce <__swbuf_r+0x42>
 80029c4:	4621      	mov	r1, r4
 80029c6:	4628      	mov	r0, r5
 80029c8:	f000 f92e 	bl	8002c28 <_fflush_r>
 80029cc:	bb30      	cbnz	r0, 8002a1c <__swbuf_r+0x90>
 80029ce:	68a3      	ldr	r3, [r4, #8]
 80029d0:	3001      	adds	r0, #1
 80029d2:	3b01      	subs	r3, #1
 80029d4:	60a3      	str	r3, [r4, #8]
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	6022      	str	r2, [r4, #0]
 80029dc:	701e      	strb	r6, [r3, #0]
 80029de:	6963      	ldr	r3, [r4, #20]
 80029e0:	4283      	cmp	r3, r0
 80029e2:	d004      	beq.n	80029ee <__swbuf_r+0x62>
 80029e4:	89a3      	ldrh	r3, [r4, #12]
 80029e6:	07db      	lsls	r3, r3, #31
 80029e8:	d506      	bpl.n	80029f8 <__swbuf_r+0x6c>
 80029ea:	2e0a      	cmp	r6, #10
 80029ec:	d104      	bne.n	80029f8 <__swbuf_r+0x6c>
 80029ee:	4621      	mov	r1, r4
 80029f0:	4628      	mov	r0, r5
 80029f2:	f000 f919 	bl	8002c28 <_fflush_r>
 80029f6:	b988      	cbnz	r0, 8002a1c <__swbuf_r+0x90>
 80029f8:	4638      	mov	r0, r7
 80029fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <__swbuf_r+0x9c>)
 80029fe:	429c      	cmp	r4, r3
 8002a00:	d101      	bne.n	8002a06 <__swbuf_r+0x7a>
 8002a02:	68ac      	ldr	r4, [r5, #8]
 8002a04:	e7cf      	b.n	80029a6 <__swbuf_r+0x1a>
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <__swbuf_r+0xa0>)
 8002a08:	429c      	cmp	r4, r3
 8002a0a:	bf08      	it	eq
 8002a0c:	68ec      	ldreq	r4, [r5, #12]
 8002a0e:	e7ca      	b.n	80029a6 <__swbuf_r+0x1a>
 8002a10:	4621      	mov	r1, r4
 8002a12:	4628      	mov	r0, r5
 8002a14:	f000 f80c 	bl	8002a30 <__swsetup_r>
 8002a18:	2800      	cmp	r0, #0
 8002a1a:	d0cb      	beq.n	80029b4 <__swbuf_r+0x28>
 8002a1c:	f04f 37ff 	mov.w	r7, #4294967295
 8002a20:	e7ea      	b.n	80029f8 <__swbuf_r+0x6c>
 8002a22:	bf00      	nop
 8002a24:	080032b0 	.word	0x080032b0
 8002a28:	080032d0 	.word	0x080032d0
 8002a2c:	08003290 	.word	0x08003290

08002a30 <__swsetup_r>:
 8002a30:	4b32      	ldr	r3, [pc, #200]	; (8002afc <__swsetup_r+0xcc>)
 8002a32:	b570      	push	{r4, r5, r6, lr}
 8002a34:	681d      	ldr	r5, [r3, #0]
 8002a36:	4606      	mov	r6, r0
 8002a38:	460c      	mov	r4, r1
 8002a3a:	b125      	cbz	r5, 8002a46 <__swsetup_r+0x16>
 8002a3c:	69ab      	ldr	r3, [r5, #24]
 8002a3e:	b913      	cbnz	r3, 8002a46 <__swsetup_r+0x16>
 8002a40:	4628      	mov	r0, r5
 8002a42:	f000 f985 	bl	8002d50 <__sinit>
 8002a46:	4b2e      	ldr	r3, [pc, #184]	; (8002b00 <__swsetup_r+0xd0>)
 8002a48:	429c      	cmp	r4, r3
 8002a4a:	d10f      	bne.n	8002a6c <__swsetup_r+0x3c>
 8002a4c:	686c      	ldr	r4, [r5, #4]
 8002a4e:	89a3      	ldrh	r3, [r4, #12]
 8002a50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a54:	0719      	lsls	r1, r3, #28
 8002a56:	d42c      	bmi.n	8002ab2 <__swsetup_r+0x82>
 8002a58:	06dd      	lsls	r5, r3, #27
 8002a5a:	d411      	bmi.n	8002a80 <__swsetup_r+0x50>
 8002a5c:	2309      	movs	r3, #9
 8002a5e:	6033      	str	r3, [r6, #0]
 8002a60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002a64:	f04f 30ff 	mov.w	r0, #4294967295
 8002a68:	81a3      	strh	r3, [r4, #12]
 8002a6a:	e03e      	b.n	8002aea <__swsetup_r+0xba>
 8002a6c:	4b25      	ldr	r3, [pc, #148]	; (8002b04 <__swsetup_r+0xd4>)
 8002a6e:	429c      	cmp	r4, r3
 8002a70:	d101      	bne.n	8002a76 <__swsetup_r+0x46>
 8002a72:	68ac      	ldr	r4, [r5, #8]
 8002a74:	e7eb      	b.n	8002a4e <__swsetup_r+0x1e>
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <__swsetup_r+0xd8>)
 8002a78:	429c      	cmp	r4, r3
 8002a7a:	bf08      	it	eq
 8002a7c:	68ec      	ldreq	r4, [r5, #12]
 8002a7e:	e7e6      	b.n	8002a4e <__swsetup_r+0x1e>
 8002a80:	0758      	lsls	r0, r3, #29
 8002a82:	d512      	bpl.n	8002aaa <__swsetup_r+0x7a>
 8002a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a86:	b141      	cbz	r1, 8002a9a <__swsetup_r+0x6a>
 8002a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a8c:	4299      	cmp	r1, r3
 8002a8e:	d002      	beq.n	8002a96 <__swsetup_r+0x66>
 8002a90:	4630      	mov	r0, r6
 8002a92:	f7ff fbd7 	bl	8002244 <_free_r>
 8002a96:	2300      	movs	r3, #0
 8002a98:	6363      	str	r3, [r4, #52]	; 0x34
 8002a9a:	89a3      	ldrh	r3, [r4, #12]
 8002a9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002aa0:	81a3      	strh	r3, [r4, #12]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	6063      	str	r3, [r4, #4]
 8002aa6:	6923      	ldr	r3, [r4, #16]
 8002aa8:	6023      	str	r3, [r4, #0]
 8002aaa:	89a3      	ldrh	r3, [r4, #12]
 8002aac:	f043 0308 	orr.w	r3, r3, #8
 8002ab0:	81a3      	strh	r3, [r4, #12]
 8002ab2:	6923      	ldr	r3, [r4, #16]
 8002ab4:	b94b      	cbnz	r3, 8002aca <__swsetup_r+0x9a>
 8002ab6:	89a3      	ldrh	r3, [r4, #12]
 8002ab8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac0:	d003      	beq.n	8002aca <__swsetup_r+0x9a>
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	f000 fa07 	bl	8002ed8 <__smakebuf_r>
 8002aca:	89a0      	ldrh	r0, [r4, #12]
 8002acc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ad0:	f010 0301 	ands.w	r3, r0, #1
 8002ad4:	d00a      	beq.n	8002aec <__swsetup_r+0xbc>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60a3      	str	r3, [r4, #8]
 8002ada:	6963      	ldr	r3, [r4, #20]
 8002adc:	425b      	negs	r3, r3
 8002ade:	61a3      	str	r3, [r4, #24]
 8002ae0:	6923      	ldr	r3, [r4, #16]
 8002ae2:	b943      	cbnz	r3, 8002af6 <__swsetup_r+0xc6>
 8002ae4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ae8:	d1ba      	bne.n	8002a60 <__swsetup_r+0x30>
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
 8002aec:	0781      	lsls	r1, r0, #30
 8002aee:	bf58      	it	pl
 8002af0:	6963      	ldrpl	r3, [r4, #20]
 8002af2:	60a3      	str	r3, [r4, #8]
 8002af4:	e7f4      	b.n	8002ae0 <__swsetup_r+0xb0>
 8002af6:	2000      	movs	r0, #0
 8002af8:	e7f7      	b.n	8002aea <__swsetup_r+0xba>
 8002afa:	bf00      	nop
 8002afc:	20000024 	.word	0x20000024
 8002b00:	080032b0 	.word	0x080032b0
 8002b04:	080032d0 	.word	0x080032d0
 8002b08:	08003290 	.word	0x08003290

08002b0c <abort>:
 8002b0c:	2006      	movs	r0, #6
 8002b0e:	b508      	push	{r3, lr}
 8002b10:	f000 fa64 	bl	8002fdc <raise>
 8002b14:	2001      	movs	r0, #1
 8002b16:	f7fd feb2 	bl	800087e <_exit>
	...

08002b1c <__sflush_r>:
 8002b1c:	898a      	ldrh	r2, [r1, #12]
 8002b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b22:	4605      	mov	r5, r0
 8002b24:	0710      	lsls	r0, r2, #28
 8002b26:	460c      	mov	r4, r1
 8002b28:	d458      	bmi.n	8002bdc <__sflush_r+0xc0>
 8002b2a:	684b      	ldr	r3, [r1, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	dc05      	bgt.n	8002b3c <__sflush_r+0x20>
 8002b30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	dc02      	bgt.n	8002b3c <__sflush_r+0x20>
 8002b36:	2000      	movs	r0, #0
 8002b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b3e:	2e00      	cmp	r6, #0
 8002b40:	d0f9      	beq.n	8002b36 <__sflush_r+0x1a>
 8002b42:	2300      	movs	r3, #0
 8002b44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b48:	682f      	ldr	r7, [r5, #0]
 8002b4a:	602b      	str	r3, [r5, #0]
 8002b4c:	d032      	beq.n	8002bb4 <__sflush_r+0x98>
 8002b4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b50:	89a3      	ldrh	r3, [r4, #12]
 8002b52:	075a      	lsls	r2, r3, #29
 8002b54:	d505      	bpl.n	8002b62 <__sflush_r+0x46>
 8002b56:	6863      	ldr	r3, [r4, #4]
 8002b58:	1ac0      	subs	r0, r0, r3
 8002b5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b5c:	b10b      	cbz	r3, 8002b62 <__sflush_r+0x46>
 8002b5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b60:	1ac0      	subs	r0, r0, r3
 8002b62:	2300      	movs	r3, #0
 8002b64:	4602      	mov	r2, r0
 8002b66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b68:	4628      	mov	r0, r5
 8002b6a:	6a21      	ldr	r1, [r4, #32]
 8002b6c:	47b0      	blx	r6
 8002b6e:	1c43      	adds	r3, r0, #1
 8002b70:	89a3      	ldrh	r3, [r4, #12]
 8002b72:	d106      	bne.n	8002b82 <__sflush_r+0x66>
 8002b74:	6829      	ldr	r1, [r5, #0]
 8002b76:	291d      	cmp	r1, #29
 8002b78:	d82c      	bhi.n	8002bd4 <__sflush_r+0xb8>
 8002b7a:	4a2a      	ldr	r2, [pc, #168]	; (8002c24 <__sflush_r+0x108>)
 8002b7c:	40ca      	lsrs	r2, r1
 8002b7e:	07d6      	lsls	r6, r2, #31
 8002b80:	d528      	bpl.n	8002bd4 <__sflush_r+0xb8>
 8002b82:	2200      	movs	r2, #0
 8002b84:	6062      	str	r2, [r4, #4]
 8002b86:	6922      	ldr	r2, [r4, #16]
 8002b88:	04d9      	lsls	r1, r3, #19
 8002b8a:	6022      	str	r2, [r4, #0]
 8002b8c:	d504      	bpl.n	8002b98 <__sflush_r+0x7c>
 8002b8e:	1c42      	adds	r2, r0, #1
 8002b90:	d101      	bne.n	8002b96 <__sflush_r+0x7a>
 8002b92:	682b      	ldr	r3, [r5, #0]
 8002b94:	b903      	cbnz	r3, 8002b98 <__sflush_r+0x7c>
 8002b96:	6560      	str	r0, [r4, #84]	; 0x54
 8002b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b9a:	602f      	str	r7, [r5, #0]
 8002b9c:	2900      	cmp	r1, #0
 8002b9e:	d0ca      	beq.n	8002b36 <__sflush_r+0x1a>
 8002ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ba4:	4299      	cmp	r1, r3
 8002ba6:	d002      	beq.n	8002bae <__sflush_r+0x92>
 8002ba8:	4628      	mov	r0, r5
 8002baa:	f7ff fb4b 	bl	8002244 <_free_r>
 8002bae:	2000      	movs	r0, #0
 8002bb0:	6360      	str	r0, [r4, #52]	; 0x34
 8002bb2:	e7c1      	b.n	8002b38 <__sflush_r+0x1c>
 8002bb4:	6a21      	ldr	r1, [r4, #32]
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	4628      	mov	r0, r5
 8002bba:	47b0      	blx	r6
 8002bbc:	1c41      	adds	r1, r0, #1
 8002bbe:	d1c7      	bne.n	8002b50 <__sflush_r+0x34>
 8002bc0:	682b      	ldr	r3, [r5, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0c4      	beq.n	8002b50 <__sflush_r+0x34>
 8002bc6:	2b1d      	cmp	r3, #29
 8002bc8:	d001      	beq.n	8002bce <__sflush_r+0xb2>
 8002bca:	2b16      	cmp	r3, #22
 8002bcc:	d101      	bne.n	8002bd2 <__sflush_r+0xb6>
 8002bce:	602f      	str	r7, [r5, #0]
 8002bd0:	e7b1      	b.n	8002b36 <__sflush_r+0x1a>
 8002bd2:	89a3      	ldrh	r3, [r4, #12]
 8002bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bd8:	81a3      	strh	r3, [r4, #12]
 8002bda:	e7ad      	b.n	8002b38 <__sflush_r+0x1c>
 8002bdc:	690f      	ldr	r7, [r1, #16]
 8002bde:	2f00      	cmp	r7, #0
 8002be0:	d0a9      	beq.n	8002b36 <__sflush_r+0x1a>
 8002be2:	0793      	lsls	r3, r2, #30
 8002be4:	bf18      	it	ne
 8002be6:	2300      	movne	r3, #0
 8002be8:	680e      	ldr	r6, [r1, #0]
 8002bea:	bf08      	it	eq
 8002bec:	694b      	ldreq	r3, [r1, #20]
 8002bee:	eba6 0807 	sub.w	r8, r6, r7
 8002bf2:	600f      	str	r7, [r1, #0]
 8002bf4:	608b      	str	r3, [r1, #8]
 8002bf6:	f1b8 0f00 	cmp.w	r8, #0
 8002bfa:	dd9c      	ble.n	8002b36 <__sflush_r+0x1a>
 8002bfc:	4643      	mov	r3, r8
 8002bfe:	463a      	mov	r2, r7
 8002c00:	4628      	mov	r0, r5
 8002c02:	6a21      	ldr	r1, [r4, #32]
 8002c04:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c06:	47b0      	blx	r6
 8002c08:	2800      	cmp	r0, #0
 8002c0a:	dc06      	bgt.n	8002c1a <__sflush_r+0xfe>
 8002c0c:	89a3      	ldrh	r3, [r4, #12]
 8002c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c16:	81a3      	strh	r3, [r4, #12]
 8002c18:	e78e      	b.n	8002b38 <__sflush_r+0x1c>
 8002c1a:	4407      	add	r7, r0
 8002c1c:	eba8 0800 	sub.w	r8, r8, r0
 8002c20:	e7e9      	b.n	8002bf6 <__sflush_r+0xda>
 8002c22:	bf00      	nop
 8002c24:	20400001 	.word	0x20400001

08002c28 <_fflush_r>:
 8002c28:	b538      	push	{r3, r4, r5, lr}
 8002c2a:	690b      	ldr	r3, [r1, #16]
 8002c2c:	4605      	mov	r5, r0
 8002c2e:	460c      	mov	r4, r1
 8002c30:	b913      	cbnz	r3, 8002c38 <_fflush_r+0x10>
 8002c32:	2500      	movs	r5, #0
 8002c34:	4628      	mov	r0, r5
 8002c36:	bd38      	pop	{r3, r4, r5, pc}
 8002c38:	b118      	cbz	r0, 8002c42 <_fflush_r+0x1a>
 8002c3a:	6983      	ldr	r3, [r0, #24]
 8002c3c:	b90b      	cbnz	r3, 8002c42 <_fflush_r+0x1a>
 8002c3e:	f000 f887 	bl	8002d50 <__sinit>
 8002c42:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <_fflush_r+0x6c>)
 8002c44:	429c      	cmp	r4, r3
 8002c46:	d11b      	bne.n	8002c80 <_fflush_r+0x58>
 8002c48:	686c      	ldr	r4, [r5, #4]
 8002c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0ef      	beq.n	8002c32 <_fflush_r+0xa>
 8002c52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002c54:	07d0      	lsls	r0, r2, #31
 8002c56:	d404      	bmi.n	8002c62 <_fflush_r+0x3a>
 8002c58:	0599      	lsls	r1, r3, #22
 8002c5a:	d402      	bmi.n	8002c62 <_fflush_r+0x3a>
 8002c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c5e:	f000 f915 	bl	8002e8c <__retarget_lock_acquire_recursive>
 8002c62:	4628      	mov	r0, r5
 8002c64:	4621      	mov	r1, r4
 8002c66:	f7ff ff59 	bl	8002b1c <__sflush_r>
 8002c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c6c:	4605      	mov	r5, r0
 8002c6e:	07da      	lsls	r2, r3, #31
 8002c70:	d4e0      	bmi.n	8002c34 <_fflush_r+0xc>
 8002c72:	89a3      	ldrh	r3, [r4, #12]
 8002c74:	059b      	lsls	r3, r3, #22
 8002c76:	d4dd      	bmi.n	8002c34 <_fflush_r+0xc>
 8002c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c7a:	f000 f908 	bl	8002e8e <__retarget_lock_release_recursive>
 8002c7e:	e7d9      	b.n	8002c34 <_fflush_r+0xc>
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <_fflush_r+0x70>)
 8002c82:	429c      	cmp	r4, r3
 8002c84:	d101      	bne.n	8002c8a <_fflush_r+0x62>
 8002c86:	68ac      	ldr	r4, [r5, #8]
 8002c88:	e7df      	b.n	8002c4a <_fflush_r+0x22>
 8002c8a:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <_fflush_r+0x74>)
 8002c8c:	429c      	cmp	r4, r3
 8002c8e:	bf08      	it	eq
 8002c90:	68ec      	ldreq	r4, [r5, #12]
 8002c92:	e7da      	b.n	8002c4a <_fflush_r+0x22>
 8002c94:	080032b0 	.word	0x080032b0
 8002c98:	080032d0 	.word	0x080032d0
 8002c9c:	08003290 	.word	0x08003290

08002ca0 <std>:
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	b510      	push	{r4, lr}
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8002caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cae:	6083      	str	r3, [r0, #8]
 8002cb0:	8181      	strh	r1, [r0, #12]
 8002cb2:	6643      	str	r3, [r0, #100]	; 0x64
 8002cb4:	81c2      	strh	r2, [r0, #14]
 8002cb6:	6183      	str	r3, [r0, #24]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	2208      	movs	r2, #8
 8002cbc:	305c      	adds	r0, #92	; 0x5c
 8002cbe:	f7ff fa41 	bl	8002144 <memset>
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <std+0x38>)
 8002cc4:	6224      	str	r4, [r4, #32]
 8002cc6:	6263      	str	r3, [r4, #36]	; 0x24
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <std+0x3c>)
 8002cca:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <std+0x40>)
 8002cce:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <std+0x44>)
 8002cd2:	6323      	str	r3, [r4, #48]	; 0x30
 8002cd4:	bd10      	pop	{r4, pc}
 8002cd6:	bf00      	nop
 8002cd8:	08003015 	.word	0x08003015
 8002cdc:	08003037 	.word	0x08003037
 8002ce0:	0800306f 	.word	0x0800306f
 8002ce4:	08003093 	.word	0x08003093

08002ce8 <_cleanup_r>:
 8002ce8:	4901      	ldr	r1, [pc, #4]	; (8002cf0 <_cleanup_r+0x8>)
 8002cea:	f000 b8af 	b.w	8002e4c <_fwalk_reent>
 8002cee:	bf00      	nop
 8002cf0:	08002c29 	.word	0x08002c29

08002cf4 <__sfmoreglue>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	2568      	movs	r5, #104	; 0x68
 8002cf8:	1e4a      	subs	r2, r1, #1
 8002cfa:	4355      	muls	r5, r2
 8002cfc:	460e      	mov	r6, r1
 8002cfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002d02:	f7ff faeb 	bl	80022dc <_malloc_r>
 8002d06:	4604      	mov	r4, r0
 8002d08:	b140      	cbz	r0, 8002d1c <__sfmoreglue+0x28>
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	e9c0 1600 	strd	r1, r6, [r0]
 8002d10:	300c      	adds	r0, #12
 8002d12:	60a0      	str	r0, [r4, #8]
 8002d14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002d18:	f7ff fa14 	bl	8002144 <memset>
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	bd70      	pop	{r4, r5, r6, pc}

08002d20 <__sfp_lock_acquire>:
 8002d20:	4801      	ldr	r0, [pc, #4]	; (8002d28 <__sfp_lock_acquire+0x8>)
 8002d22:	f000 b8b3 	b.w	8002e8c <__retarget_lock_acquire_recursive>
 8002d26:	bf00      	nop
 8002d28:	20000120 	.word	0x20000120

08002d2c <__sfp_lock_release>:
 8002d2c:	4801      	ldr	r0, [pc, #4]	; (8002d34 <__sfp_lock_release+0x8>)
 8002d2e:	f000 b8ae 	b.w	8002e8e <__retarget_lock_release_recursive>
 8002d32:	bf00      	nop
 8002d34:	20000120 	.word	0x20000120

08002d38 <__sinit_lock_acquire>:
 8002d38:	4801      	ldr	r0, [pc, #4]	; (8002d40 <__sinit_lock_acquire+0x8>)
 8002d3a:	f000 b8a7 	b.w	8002e8c <__retarget_lock_acquire_recursive>
 8002d3e:	bf00      	nop
 8002d40:	2000011b 	.word	0x2000011b

08002d44 <__sinit_lock_release>:
 8002d44:	4801      	ldr	r0, [pc, #4]	; (8002d4c <__sinit_lock_release+0x8>)
 8002d46:	f000 b8a2 	b.w	8002e8e <__retarget_lock_release_recursive>
 8002d4a:	bf00      	nop
 8002d4c:	2000011b 	.word	0x2000011b

08002d50 <__sinit>:
 8002d50:	b510      	push	{r4, lr}
 8002d52:	4604      	mov	r4, r0
 8002d54:	f7ff fff0 	bl	8002d38 <__sinit_lock_acquire>
 8002d58:	69a3      	ldr	r3, [r4, #24]
 8002d5a:	b11b      	cbz	r3, 8002d64 <__sinit+0x14>
 8002d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d60:	f7ff bff0 	b.w	8002d44 <__sinit_lock_release>
 8002d64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002d68:	6523      	str	r3, [r4, #80]	; 0x50
 8002d6a:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <__sinit+0x68>)
 8002d6c:	4a13      	ldr	r2, [pc, #76]	; (8002dbc <__sinit+0x6c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	62a2      	str	r2, [r4, #40]	; 0x28
 8002d72:	42a3      	cmp	r3, r4
 8002d74:	bf08      	it	eq
 8002d76:	2301      	moveq	r3, #1
 8002d78:	4620      	mov	r0, r4
 8002d7a:	bf08      	it	eq
 8002d7c:	61a3      	streq	r3, [r4, #24]
 8002d7e:	f000 f81f 	bl	8002dc0 <__sfp>
 8002d82:	6060      	str	r0, [r4, #4]
 8002d84:	4620      	mov	r0, r4
 8002d86:	f000 f81b 	bl	8002dc0 <__sfp>
 8002d8a:	60a0      	str	r0, [r4, #8]
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	f000 f817 	bl	8002dc0 <__sfp>
 8002d92:	2200      	movs	r2, #0
 8002d94:	2104      	movs	r1, #4
 8002d96:	60e0      	str	r0, [r4, #12]
 8002d98:	6860      	ldr	r0, [r4, #4]
 8002d9a:	f7ff ff81 	bl	8002ca0 <std>
 8002d9e:	2201      	movs	r2, #1
 8002da0:	2109      	movs	r1, #9
 8002da2:	68a0      	ldr	r0, [r4, #8]
 8002da4:	f7ff ff7c 	bl	8002ca0 <std>
 8002da8:	2202      	movs	r2, #2
 8002daa:	2112      	movs	r1, #18
 8002dac:	68e0      	ldr	r0, [r4, #12]
 8002dae:	f7ff ff77 	bl	8002ca0 <std>
 8002db2:	2301      	movs	r3, #1
 8002db4:	61a3      	str	r3, [r4, #24]
 8002db6:	e7d1      	b.n	8002d5c <__sinit+0xc>
 8002db8:	080031a4 	.word	0x080031a4
 8002dbc:	08002ce9 	.word	0x08002ce9

08002dc0 <__sfp>:
 8002dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc2:	4607      	mov	r7, r0
 8002dc4:	f7ff ffac 	bl	8002d20 <__sfp_lock_acquire>
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <__sfp+0x84>)
 8002dca:	681e      	ldr	r6, [r3, #0]
 8002dcc:	69b3      	ldr	r3, [r6, #24]
 8002dce:	b913      	cbnz	r3, 8002dd6 <__sfp+0x16>
 8002dd0:	4630      	mov	r0, r6
 8002dd2:	f7ff ffbd 	bl	8002d50 <__sinit>
 8002dd6:	3648      	adds	r6, #72	; 0x48
 8002dd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	d503      	bpl.n	8002de8 <__sfp+0x28>
 8002de0:	6833      	ldr	r3, [r6, #0]
 8002de2:	b30b      	cbz	r3, 8002e28 <__sfp+0x68>
 8002de4:	6836      	ldr	r6, [r6, #0]
 8002de6:	e7f7      	b.n	8002dd8 <__sfp+0x18>
 8002de8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002dec:	b9d5      	cbnz	r5, 8002e24 <__sfp+0x64>
 8002dee:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <__sfp+0x88>)
 8002df0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002df4:	60e3      	str	r3, [r4, #12]
 8002df6:	6665      	str	r5, [r4, #100]	; 0x64
 8002df8:	f000 f847 	bl	8002e8a <__retarget_lock_init_recursive>
 8002dfc:	f7ff ff96 	bl	8002d2c <__sfp_lock_release>
 8002e00:	2208      	movs	r2, #8
 8002e02:	4629      	mov	r1, r5
 8002e04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002e08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002e0c:	6025      	str	r5, [r4, #0]
 8002e0e:	61a5      	str	r5, [r4, #24]
 8002e10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002e14:	f7ff f996 	bl	8002144 <memset>
 8002e18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002e1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002e20:	4620      	mov	r0, r4
 8002e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e24:	3468      	adds	r4, #104	; 0x68
 8002e26:	e7d9      	b.n	8002ddc <__sfp+0x1c>
 8002e28:	2104      	movs	r1, #4
 8002e2a:	4638      	mov	r0, r7
 8002e2c:	f7ff ff62 	bl	8002cf4 <__sfmoreglue>
 8002e30:	4604      	mov	r4, r0
 8002e32:	6030      	str	r0, [r6, #0]
 8002e34:	2800      	cmp	r0, #0
 8002e36:	d1d5      	bne.n	8002de4 <__sfp+0x24>
 8002e38:	f7ff ff78 	bl	8002d2c <__sfp_lock_release>
 8002e3c:	230c      	movs	r3, #12
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	e7ee      	b.n	8002e20 <__sfp+0x60>
 8002e42:	bf00      	nop
 8002e44:	080031a4 	.word	0x080031a4
 8002e48:	ffff0001 	.word	0xffff0001

08002e4c <_fwalk_reent>:
 8002e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e50:	4606      	mov	r6, r0
 8002e52:	4688      	mov	r8, r1
 8002e54:	2700      	movs	r7, #0
 8002e56:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002e5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e5e:	f1b9 0901 	subs.w	r9, r9, #1
 8002e62:	d505      	bpl.n	8002e70 <_fwalk_reent+0x24>
 8002e64:	6824      	ldr	r4, [r4, #0]
 8002e66:	2c00      	cmp	r4, #0
 8002e68:	d1f7      	bne.n	8002e5a <_fwalk_reent+0xe>
 8002e6a:	4638      	mov	r0, r7
 8002e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e70:	89ab      	ldrh	r3, [r5, #12]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d907      	bls.n	8002e86 <_fwalk_reent+0x3a>
 8002e76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	d003      	beq.n	8002e86 <_fwalk_reent+0x3a>
 8002e7e:	4629      	mov	r1, r5
 8002e80:	4630      	mov	r0, r6
 8002e82:	47c0      	blx	r8
 8002e84:	4307      	orrs	r7, r0
 8002e86:	3568      	adds	r5, #104	; 0x68
 8002e88:	e7e9      	b.n	8002e5e <_fwalk_reent+0x12>

08002e8a <__retarget_lock_init_recursive>:
 8002e8a:	4770      	bx	lr

08002e8c <__retarget_lock_acquire_recursive>:
 8002e8c:	4770      	bx	lr

08002e8e <__retarget_lock_release_recursive>:
 8002e8e:	4770      	bx	lr

08002e90 <__swhatbuf_r>:
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	460e      	mov	r6, r1
 8002e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e98:	4614      	mov	r4, r2
 8002e9a:	2900      	cmp	r1, #0
 8002e9c:	461d      	mov	r5, r3
 8002e9e:	b096      	sub	sp, #88	; 0x58
 8002ea0:	da07      	bge.n	8002eb2 <__swhatbuf_r+0x22>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	602b      	str	r3, [r5, #0]
 8002ea6:	89b3      	ldrh	r3, [r6, #12]
 8002ea8:	061a      	lsls	r2, r3, #24
 8002eaa:	d410      	bmi.n	8002ece <__swhatbuf_r+0x3e>
 8002eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eb0:	e00e      	b.n	8002ed0 <__swhatbuf_r+0x40>
 8002eb2:	466a      	mov	r2, sp
 8002eb4:	f000 f914 	bl	80030e0 <_fstat_r>
 8002eb8:	2800      	cmp	r0, #0
 8002eba:	dbf2      	blt.n	8002ea2 <__swhatbuf_r+0x12>
 8002ebc:	9a01      	ldr	r2, [sp, #4]
 8002ebe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ec2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ec6:	425a      	negs	r2, r3
 8002ec8:	415a      	adcs	r2, r3
 8002eca:	602a      	str	r2, [r5, #0]
 8002ecc:	e7ee      	b.n	8002eac <__swhatbuf_r+0x1c>
 8002ece:	2340      	movs	r3, #64	; 0x40
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	6023      	str	r3, [r4, #0]
 8002ed4:	b016      	add	sp, #88	; 0x58
 8002ed6:	bd70      	pop	{r4, r5, r6, pc}

08002ed8 <__smakebuf_r>:
 8002ed8:	898b      	ldrh	r3, [r1, #12]
 8002eda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002edc:	079d      	lsls	r5, r3, #30
 8002ede:	4606      	mov	r6, r0
 8002ee0:	460c      	mov	r4, r1
 8002ee2:	d507      	bpl.n	8002ef4 <__smakebuf_r+0x1c>
 8002ee4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002ee8:	6023      	str	r3, [r4, #0]
 8002eea:	6123      	str	r3, [r4, #16]
 8002eec:	2301      	movs	r3, #1
 8002eee:	6163      	str	r3, [r4, #20]
 8002ef0:	b002      	add	sp, #8
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
 8002ef4:	466a      	mov	r2, sp
 8002ef6:	ab01      	add	r3, sp, #4
 8002ef8:	f7ff ffca 	bl	8002e90 <__swhatbuf_r>
 8002efc:	9900      	ldr	r1, [sp, #0]
 8002efe:	4605      	mov	r5, r0
 8002f00:	4630      	mov	r0, r6
 8002f02:	f7ff f9eb 	bl	80022dc <_malloc_r>
 8002f06:	b948      	cbnz	r0, 8002f1c <__smakebuf_r+0x44>
 8002f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f0c:	059a      	lsls	r2, r3, #22
 8002f0e:	d4ef      	bmi.n	8002ef0 <__smakebuf_r+0x18>
 8002f10:	f023 0303 	bic.w	r3, r3, #3
 8002f14:	f043 0302 	orr.w	r3, r3, #2
 8002f18:	81a3      	strh	r3, [r4, #12]
 8002f1a:	e7e3      	b.n	8002ee4 <__smakebuf_r+0xc>
 8002f1c:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <__smakebuf_r+0x7c>)
 8002f1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f20:	89a3      	ldrh	r3, [r4, #12]
 8002f22:	6020      	str	r0, [r4, #0]
 8002f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f28:	81a3      	strh	r3, [r4, #12]
 8002f2a:	9b00      	ldr	r3, [sp, #0]
 8002f2c:	6120      	str	r0, [r4, #16]
 8002f2e:	6163      	str	r3, [r4, #20]
 8002f30:	9b01      	ldr	r3, [sp, #4]
 8002f32:	b15b      	cbz	r3, 8002f4c <__smakebuf_r+0x74>
 8002f34:	4630      	mov	r0, r6
 8002f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f3a:	f000 f8e3 	bl	8003104 <_isatty_r>
 8002f3e:	b128      	cbz	r0, 8002f4c <__smakebuf_r+0x74>
 8002f40:	89a3      	ldrh	r3, [r4, #12]
 8002f42:	f023 0303 	bic.w	r3, r3, #3
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	81a3      	strh	r3, [r4, #12]
 8002f4c:	89a0      	ldrh	r0, [r4, #12]
 8002f4e:	4305      	orrs	r5, r0
 8002f50:	81a5      	strh	r5, [r4, #12]
 8002f52:	e7cd      	b.n	8002ef0 <__smakebuf_r+0x18>
 8002f54:	08002ce9 	.word	0x08002ce9

08002f58 <memchr>:
 8002f58:	4603      	mov	r3, r0
 8002f5a:	b510      	push	{r4, lr}
 8002f5c:	b2c9      	uxtb	r1, r1
 8002f5e:	4402      	add	r2, r0
 8002f60:	4293      	cmp	r3, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	d101      	bne.n	8002f6a <memchr+0x12>
 8002f66:	2000      	movs	r0, #0
 8002f68:	e003      	b.n	8002f72 <memchr+0x1a>
 8002f6a:	7804      	ldrb	r4, [r0, #0]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	428c      	cmp	r4, r1
 8002f70:	d1f6      	bne.n	8002f60 <memchr+0x8>
 8002f72:	bd10      	pop	{r4, pc}

08002f74 <__malloc_lock>:
 8002f74:	4801      	ldr	r0, [pc, #4]	; (8002f7c <__malloc_lock+0x8>)
 8002f76:	f7ff bf89 	b.w	8002e8c <__retarget_lock_acquire_recursive>
 8002f7a:	bf00      	nop
 8002f7c:	2000011c 	.word	0x2000011c

08002f80 <__malloc_unlock>:
 8002f80:	4801      	ldr	r0, [pc, #4]	; (8002f88 <__malloc_unlock+0x8>)
 8002f82:	f7ff bf84 	b.w	8002e8e <__retarget_lock_release_recursive>
 8002f86:	bf00      	nop
 8002f88:	2000011c 	.word	0x2000011c

08002f8c <_raise_r>:
 8002f8c:	291f      	cmp	r1, #31
 8002f8e:	b538      	push	{r3, r4, r5, lr}
 8002f90:	4604      	mov	r4, r0
 8002f92:	460d      	mov	r5, r1
 8002f94:	d904      	bls.n	8002fa0 <_raise_r+0x14>
 8002f96:	2316      	movs	r3, #22
 8002f98:	6003      	str	r3, [r0, #0]
 8002f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9e:	bd38      	pop	{r3, r4, r5, pc}
 8002fa0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002fa2:	b112      	cbz	r2, 8002faa <_raise_r+0x1e>
 8002fa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002fa8:	b94b      	cbnz	r3, 8002fbe <_raise_r+0x32>
 8002faa:	4620      	mov	r0, r4
 8002fac:	f000 f830 	bl	8003010 <_getpid_r>
 8002fb0:	462a      	mov	r2, r5
 8002fb2:	4601      	mov	r1, r0
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fba:	f000 b817 	b.w	8002fec <_kill_r>
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d00a      	beq.n	8002fd8 <_raise_r+0x4c>
 8002fc2:	1c59      	adds	r1, r3, #1
 8002fc4:	d103      	bne.n	8002fce <_raise_r+0x42>
 8002fc6:	2316      	movs	r3, #22
 8002fc8:	6003      	str	r3, [r0, #0]
 8002fca:	2001      	movs	r0, #1
 8002fcc:	e7e7      	b.n	8002f9e <_raise_r+0x12>
 8002fce:	2400      	movs	r4, #0
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002fd6:	4798      	blx	r3
 8002fd8:	2000      	movs	r0, #0
 8002fda:	e7e0      	b.n	8002f9e <_raise_r+0x12>

08002fdc <raise>:
 8002fdc:	4b02      	ldr	r3, [pc, #8]	; (8002fe8 <raise+0xc>)
 8002fde:	4601      	mov	r1, r0
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	f7ff bfd3 	b.w	8002f8c <_raise_r>
 8002fe6:	bf00      	nop
 8002fe8:	20000024 	.word	0x20000024

08002fec <_kill_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	2300      	movs	r3, #0
 8002ff0:	4d06      	ldr	r5, [pc, #24]	; (800300c <_kill_r+0x20>)
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	602b      	str	r3, [r5, #0]
 8002ffa:	f7fd fc30 	bl	800085e <_kill>
 8002ffe:	1c43      	adds	r3, r0, #1
 8003000:	d102      	bne.n	8003008 <_kill_r+0x1c>
 8003002:	682b      	ldr	r3, [r5, #0]
 8003004:	b103      	cbz	r3, 8003008 <_kill_r+0x1c>
 8003006:	6023      	str	r3, [r4, #0]
 8003008:	bd38      	pop	{r3, r4, r5, pc}
 800300a:	bf00      	nop
 800300c:	20000124 	.word	0x20000124

08003010 <_getpid_r>:
 8003010:	f7fd bc1e 	b.w	8000850 <_getpid>

08003014 <__sread>:
 8003014:	b510      	push	{r4, lr}
 8003016:	460c      	mov	r4, r1
 8003018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800301c:	f000 f894 	bl	8003148 <_read_r>
 8003020:	2800      	cmp	r0, #0
 8003022:	bfab      	itete	ge
 8003024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003026:	89a3      	ldrhlt	r3, [r4, #12]
 8003028:	181b      	addge	r3, r3, r0
 800302a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800302e:	bfac      	ite	ge
 8003030:	6563      	strge	r3, [r4, #84]	; 0x54
 8003032:	81a3      	strhlt	r3, [r4, #12]
 8003034:	bd10      	pop	{r4, pc}

08003036 <__swrite>:
 8003036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800303a:	461f      	mov	r7, r3
 800303c:	898b      	ldrh	r3, [r1, #12]
 800303e:	4605      	mov	r5, r0
 8003040:	05db      	lsls	r3, r3, #23
 8003042:	460c      	mov	r4, r1
 8003044:	4616      	mov	r6, r2
 8003046:	d505      	bpl.n	8003054 <__swrite+0x1e>
 8003048:	2302      	movs	r3, #2
 800304a:	2200      	movs	r2, #0
 800304c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003050:	f000 f868 	bl	8003124 <_lseek_r>
 8003054:	89a3      	ldrh	r3, [r4, #12]
 8003056:	4632      	mov	r2, r6
 8003058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800305c:	81a3      	strh	r3, [r4, #12]
 800305e:	4628      	mov	r0, r5
 8003060:	463b      	mov	r3, r7
 8003062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800306a:	f000 b817 	b.w	800309c <_write_r>

0800306e <__sseek>:
 800306e:	b510      	push	{r4, lr}
 8003070:	460c      	mov	r4, r1
 8003072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003076:	f000 f855 	bl	8003124 <_lseek_r>
 800307a:	1c43      	adds	r3, r0, #1
 800307c:	89a3      	ldrh	r3, [r4, #12]
 800307e:	bf15      	itete	ne
 8003080:	6560      	strne	r0, [r4, #84]	; 0x54
 8003082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800308a:	81a3      	strheq	r3, [r4, #12]
 800308c:	bf18      	it	ne
 800308e:	81a3      	strhne	r3, [r4, #12]
 8003090:	bd10      	pop	{r4, pc}

08003092 <__sclose>:
 8003092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003096:	f000 b813 	b.w	80030c0 <_close_r>
	...

0800309c <_write_r>:
 800309c:	b538      	push	{r3, r4, r5, lr}
 800309e:	4604      	mov	r4, r0
 80030a0:	4608      	mov	r0, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	2200      	movs	r2, #0
 80030a6:	4d05      	ldr	r5, [pc, #20]	; (80030bc <_write_r+0x20>)
 80030a8:	602a      	str	r2, [r5, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	f7fd fc0e 	bl	80008cc <_write>
 80030b0:	1c43      	adds	r3, r0, #1
 80030b2:	d102      	bne.n	80030ba <_write_r+0x1e>
 80030b4:	682b      	ldr	r3, [r5, #0]
 80030b6:	b103      	cbz	r3, 80030ba <_write_r+0x1e>
 80030b8:	6023      	str	r3, [r4, #0]
 80030ba:	bd38      	pop	{r3, r4, r5, pc}
 80030bc:	20000124 	.word	0x20000124

080030c0 <_close_r>:
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	2300      	movs	r3, #0
 80030c4:	4d05      	ldr	r5, [pc, #20]	; (80030dc <_close_r+0x1c>)
 80030c6:	4604      	mov	r4, r0
 80030c8:	4608      	mov	r0, r1
 80030ca:	602b      	str	r3, [r5, #0]
 80030cc:	f7fd fc1a 	bl	8000904 <_close>
 80030d0:	1c43      	adds	r3, r0, #1
 80030d2:	d102      	bne.n	80030da <_close_r+0x1a>
 80030d4:	682b      	ldr	r3, [r5, #0]
 80030d6:	b103      	cbz	r3, 80030da <_close_r+0x1a>
 80030d8:	6023      	str	r3, [r4, #0]
 80030da:	bd38      	pop	{r3, r4, r5, pc}
 80030dc:	20000124 	.word	0x20000124

080030e0 <_fstat_r>:
 80030e0:	b538      	push	{r3, r4, r5, lr}
 80030e2:	2300      	movs	r3, #0
 80030e4:	4d06      	ldr	r5, [pc, #24]	; (8003100 <_fstat_r+0x20>)
 80030e6:	4604      	mov	r4, r0
 80030e8:	4608      	mov	r0, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	602b      	str	r3, [r5, #0]
 80030ee:	f7fd fc14 	bl	800091a <_fstat>
 80030f2:	1c43      	adds	r3, r0, #1
 80030f4:	d102      	bne.n	80030fc <_fstat_r+0x1c>
 80030f6:	682b      	ldr	r3, [r5, #0]
 80030f8:	b103      	cbz	r3, 80030fc <_fstat_r+0x1c>
 80030fa:	6023      	str	r3, [r4, #0]
 80030fc:	bd38      	pop	{r3, r4, r5, pc}
 80030fe:	bf00      	nop
 8003100:	20000124 	.word	0x20000124

08003104 <_isatty_r>:
 8003104:	b538      	push	{r3, r4, r5, lr}
 8003106:	2300      	movs	r3, #0
 8003108:	4d05      	ldr	r5, [pc, #20]	; (8003120 <_isatty_r+0x1c>)
 800310a:	4604      	mov	r4, r0
 800310c:	4608      	mov	r0, r1
 800310e:	602b      	str	r3, [r5, #0]
 8003110:	f7fd fc12 	bl	8000938 <_isatty>
 8003114:	1c43      	adds	r3, r0, #1
 8003116:	d102      	bne.n	800311e <_isatty_r+0x1a>
 8003118:	682b      	ldr	r3, [r5, #0]
 800311a:	b103      	cbz	r3, 800311e <_isatty_r+0x1a>
 800311c:	6023      	str	r3, [r4, #0]
 800311e:	bd38      	pop	{r3, r4, r5, pc}
 8003120:	20000124 	.word	0x20000124

08003124 <_lseek_r>:
 8003124:	b538      	push	{r3, r4, r5, lr}
 8003126:	4604      	mov	r4, r0
 8003128:	4608      	mov	r0, r1
 800312a:	4611      	mov	r1, r2
 800312c:	2200      	movs	r2, #0
 800312e:	4d05      	ldr	r5, [pc, #20]	; (8003144 <_lseek_r+0x20>)
 8003130:	602a      	str	r2, [r5, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	f7fd fc0a 	bl	800094c <_lseek>
 8003138:	1c43      	adds	r3, r0, #1
 800313a:	d102      	bne.n	8003142 <_lseek_r+0x1e>
 800313c:	682b      	ldr	r3, [r5, #0]
 800313e:	b103      	cbz	r3, 8003142 <_lseek_r+0x1e>
 8003140:	6023      	str	r3, [r4, #0]
 8003142:	bd38      	pop	{r3, r4, r5, pc}
 8003144:	20000124 	.word	0x20000124

08003148 <_read_r>:
 8003148:	b538      	push	{r3, r4, r5, lr}
 800314a:	4604      	mov	r4, r0
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	2200      	movs	r2, #0
 8003152:	4d05      	ldr	r5, [pc, #20]	; (8003168 <_read_r+0x20>)
 8003154:	602a      	str	r2, [r5, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	f7fd fb9b 	bl	8000892 <_read>
 800315c:	1c43      	adds	r3, r0, #1
 800315e:	d102      	bne.n	8003166 <_read_r+0x1e>
 8003160:	682b      	ldr	r3, [r5, #0]
 8003162:	b103      	cbz	r3, 8003166 <_read_r+0x1e>
 8003164:	6023      	str	r3, [r4, #0]
 8003166:	bd38      	pop	{r3, r4, r5, pc}
 8003168:	20000124 	.word	0x20000124

0800316c <_init>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	bf00      	nop
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr

08003178 <_fini>:
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	bf00      	nop
 800317c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317e:	bc08      	pop	{r3}
 8003180:	469e      	mov	lr, r3
 8003182:	4770      	bx	lr
